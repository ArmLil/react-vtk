{"ast":null,"code":"var _jsxFileName = \"/home/lilit/workspace/vtk/from_scratch_frontend_vtk/src/containers/Namings.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useSnackbar } from \"notistack\";\nimport NamingTable from \"../components/Naming/NamingTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar moment = require(\"moment\");\n\nconst Naming = () => {\n  _s();\n\n  const [namings, setNamings] = useState({});\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  useEffect(() => {\n    const getNamings = async () => {\n      const namingsFromServer = await fetchNamings();\n      setNamings(namingsFromServer);\n    };\n\n    getNamings();\n  }, []); // Fetch Namings\n\n  const fetchNamings = async () => {\n    const res = await fetch(\"http://localhost:3001/api/v1/namings\");\n    const data = await res.json();\n    let columns = [];\n    let rows = data.namings.rows.map(row => {\n      console.log({\n        row\n      });\n    });\n    let locColumns = [];\n    if (data.namings.count > 0) locColumns = Object.keys(data.namings.rows[0]);\n    locColumns.forEach(item => {\n      let obj = {};\n\n      switch (item) {\n        case \"id\":\n          obj.headerName = \"ID\";\n          obj.field = item;\n          break;\n\n        case \"name\":\n          obj.headerName = \"Название\";\n          obj.field = item;\n          obj.flex = 0.4;\n          break;\n\n        case \"type\":\n          obj.headerName = \"Тип\";\n          obj.field = item;\n          obj.flex = 0.4;\n          break;\n\n        case \"createdAt\":\n          obj.headerName = \"Дата создания\";\n          obj.field = item;\n          obj.flex = 0.2;\n          break;\n\n        case \"updatedAt\":\n          obj.headerName = \"Дата редактирования\";\n          obj.field = item;\n          obj.flex = 0.3;\n          break;\n\n        case \"note\":\n          obj.headerName = \"Примечание\";\n          obj.field = item;\n          obj.flex = 0.4;\n          break;\n\n        default:\n          break;\n      }\n\n      if (data.namings.count > 0 && item !== \"deletedAt\") {\n        columns.push(obj);\n      }\n    });\n    let namings = {};\n    namings.rows = rows.map(row => {\n      row.createdAt = moment(row.createdAt).format(\"YYYY.MM.DD HH:mm\");\n      row.updatedAt = moment(row.updatedAt).format(\"YYYY.MM.DD HH:mm\");\n      return row;\n    });\n    namings.columns = columns;\n    return namings;\n  }; // Add Naming\n\n\n  const addNaming = async naming => {\n    try {\n      const res = await fetch(\"http://localhost:3001/api/v1/namings/\", {\n        method: \"POST\",\n        body: JSON.stringify(naming),\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      });\n      const data = await res.json();\n      if (data[\"Bad Request\"]) throw new Error(data[\"Bad Request\"]);\n      if (data[\"errorMessage\"]) throw new Error(data[\"errorMessage\"]);\n      let newRows = [];\n\n      if (namings.columns.length > 0) {\n        data.naming[0].createdAt = moment(data.naming.createdAt).format(\"YYYY.MM.DD HH:mm\");\n        data.naming[0].updatedAt = moment(data.naming.updatedAt).format(\"YYYY.MM.DD HH:mm\");\n        newRows = [...namings.rows, data.naming[0]];\n        let newNamings = Object.assign({}, {\n          columns: namings.columns,\n          rows: newRows\n        });\n        setNamings(newNamings);\n      } else {\n        const namingsFromServer = await fetchNamings();\n        setNamings(namingsFromServer);\n      }\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  }; // Add Naming\n\n\n  const updateNaming = async naming => {\n    console.log(\"naming = \", naming);\n\n    try {\n      const res = await fetch(`http://localhost:3001/api/v1/namings/${naming.id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(naming)\n      });\n      const data = await res.json();\n      if (data[\"Bad Request\"]) throw new Error(data[\"Bad Request\"]);\n      if (data[\"errorMessage\"]) throw new Error(data[\"errorMessage\"]);\n      data.naming.createdAt = moment(data.naming.createdAt).format(\"YYYY.MM.DD HH:mm\");\n      data.naming.updatedAt = moment(data.naming.updatedAt).format(\"YYYY.MM.DD HH:mm\");\n      let newRows = [];\n\n      if (namings.columns.length > 0) {\n        newRows = namings.rows.map(loc => loc.id === naming.id ? data.naming : loc);\n        let newNamings = Object.assign({}, {\n          columns: namings.columns,\n          rows: newRows\n        });\n        setNamings(newNamings);\n      } else {\n        const namingsFromServer = await fetchNamings();\n        setNamings(namingsFromServer);\n      }\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  }; // Delete Naming\n\n\n  const deleteNaming = async parameters => {\n    try {\n      await fetch(`http://localhost:3001/api/v1/namings/${parameters.id}`, {\n        method: \"DELETE\"\n      });\n      let newRows = namings.rows.filter(row => row.id !== parameters.id);\n      let newNamings = Object.assign({}, {\n        columns: namings.columns,\n        rows: newRows\n      });\n      setNamings(newNamings);\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(NamingTable, {\n    namings: namings,\n    deleteNaming: deleteNaming,\n    addNaming: addNaming,\n    updateNaming: updateNaming\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Naming, \"Frk3fpdIsB7ljUXAuz20B1c2hlI=\", false, function () {\n  return [useSnackbar];\n});\n\n_c = Naming;\nexport default Naming;\n\nvar _c;\n\n$RefreshReg$(_c, \"Naming\");","map":{"version":3,"sources":["/home/lilit/workspace/vtk/from_scratch_frontend_vtk/src/containers/Namings.js"],"names":["useState","useEffect","useSnackbar","NamingTable","moment","require","Naming","namings","setNamings","enqueueSnackbar","getNamings","namingsFromServer","fetchNamings","res","fetch","data","json","columns","rows","map","row","console","log","locColumns","count","Object","keys","forEach","item","obj","headerName","field","flex","push","createdAt","format","updatedAt","addNaming","naming","method","body","JSON","stringify","headers","Error","newRows","length","newNamings","assign","err","message","variant","anchorOrigin","vertical","horizontal","updateNaming","id","loc","deleteNaming","parameters","filter"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useSnackbar } from \"notistack\";\nimport NamingTable from \"../components/Naming/NamingTable\";\nvar moment = require(\"moment\");\n\nconst Naming = () => {\n  const [namings, setNamings] = useState({});\n  const { enqueueSnackbar } = useSnackbar();\n\n  useEffect(() => {\n    const getNamings = async () => {\n      const namingsFromServer = await fetchNamings();\n      setNamings(namingsFromServer);\n    };\n    getNamings();\n  }, []);\n\n  // Fetch Namings\n  const fetchNamings = async () => {\n    const res = await fetch(\"http://localhost:3001/api/v1/namings\");\n    const data = await res.json();\n    let columns = [];\n    let rows = data.namings.rows.map(row => {\n      console.log({ row });\n    });\n    let locColumns = [];\n    if (data.namings.count > 0) locColumns = Object.keys(data.namings.rows[0]);\n\n    locColumns.forEach(item => {\n      let obj = {};\n      switch (item) {\n        case \"id\":\n          obj.headerName = \"ID\";\n          obj.field = item;\n          break;\n        case \"name\":\n          obj.headerName = \"Название\";\n          obj.field = item;\n          obj.flex = 0.4;\n          break;\n        case \"type\":\n          obj.headerName = \"Тип\";\n          obj.field = item;\n          obj.flex = 0.4;\n          break;\n        case \"createdAt\":\n          obj.headerName = \"Дата создания\";\n          obj.field = item;\n          obj.flex = 0.2;\n          break;\n        case \"updatedAt\":\n          obj.headerName = \"Дата редактирования\";\n          obj.field = item;\n          obj.flex = 0.3;\n          break;\n        case \"note\":\n          obj.headerName = \"Примечание\";\n          obj.field = item;\n          obj.flex = 0.4;\n          break;\n        default:\n          break;\n      }\n      if (data.namings.count > 0 && item !== \"deletedAt\") {\n        columns.push(obj);\n      }\n    });\n\n    let namings = {};\n    namings.rows = rows.map(row => {\n      row.createdAt = moment(row.createdAt).format(\"YYYY.MM.DD HH:mm\");\n      row.updatedAt = moment(row.updatedAt).format(\"YYYY.MM.DD HH:mm\");\n      return row;\n    });\n    namings.columns = columns;\n    return namings;\n  };\n\n  // Add Naming\n  const addNaming = async naming => {\n    try {\n      const res = await fetch(\"http://localhost:3001/api/v1/namings/\", {\n        method: \"POST\",\n        body: JSON.stringify(naming),\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      });\n\n      const data = await res.json();\n      if (data[\"Bad Request\"]) throw new Error(data[\"Bad Request\"]);\n      if (data[\"errorMessage\"]) throw new Error(data[\"errorMessage\"]);\n      let newRows = [];\n      if (namings.columns.length > 0) {\n        data.naming[0].createdAt = moment(data.naming.createdAt).format(\n          \"YYYY.MM.DD HH:mm\"\n        );\n        data.naming[0].updatedAt = moment(data.naming.updatedAt).format(\n          \"YYYY.MM.DD HH:mm\"\n        );\n        newRows = [...namings.rows, data.naming[0]];\n        let newNamings = Object.assign(\n          {},\n          { columns: namings.columns, rows: newRows }\n        );\n        setNamings(newNamings);\n      } else {\n        const namingsFromServer = await fetchNamings();\n        setNamings(namingsFromServer);\n      }\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  };\n\n  // Add Naming\n  const updateNaming = async naming => {\n    console.log(\"naming = \", naming);\n    try {\n      const res = await fetch(\n        `http://localhost:3001/api/v1/namings/${naming.id}`,\n        {\n          method: \"PUT\",\n          headers: {\n            \"Content-type\": \"application/json\"\n          },\n          body: JSON.stringify(naming)\n        }\n      );\n\n      const data = await res.json();\n      if (data[\"Bad Request\"]) throw new Error(data[\"Bad Request\"]);\n      if (data[\"errorMessage\"]) throw new Error(data[\"errorMessage\"]);\n      data.naming.createdAt = moment(data.naming.createdAt).format(\n        \"YYYY.MM.DD HH:mm\"\n      );\n      data.naming.updatedAt = moment(data.naming.updatedAt).format(\n        \"YYYY.MM.DD HH:mm\"\n      );\n      let newRows = [];\n      if (namings.columns.length > 0) {\n        newRows = namings.rows.map(loc =>\n          loc.id === naming.id ? data.naming : loc\n        );\n        let newNamings = Object.assign(\n          {},\n          { columns: namings.columns, rows: newRows }\n        );\n        setNamings(newNamings);\n      } else {\n        const namingsFromServer = await fetchNamings();\n        setNamings(namingsFromServer);\n      }\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  };\n\n  // Delete Naming\n  const deleteNaming = async parameters => {\n    try {\n      await fetch(`http://localhost:3001/api/v1/namings/${parameters.id}`, {\n        method: \"DELETE\"\n      });\n\n      let newRows = namings.rows.filter(row => row.id !== parameters.id);\n      let newNamings = Object.assign(\n        {},\n        { columns: namings.columns, rows: newRows }\n      );\n      setNamings(newNamings);\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  };\n\n  return (\n    <NamingTable\n      namings={namings}\n      deleteNaming={deleteNaming}\n      addNaming={addNaming}\n      updateNaming={updateNaming}\n    ></NamingTable>\n  );\n};\n\nexport default Naming;\n"]},"metadata":{},"sourceType":"module"}