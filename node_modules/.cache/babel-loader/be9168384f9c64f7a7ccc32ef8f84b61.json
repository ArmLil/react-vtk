{"ast":null,"code":"var _jsxFileName = \"/home/lilit/workspace/vtk/from_scratch_frontend_vtk/src/containers/Locations.js\",\n    _s = $RefreshSig$();\n\nimport LocationTable from \"../components/LocationTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Location = () => {\n  _s();\n\n  const [showAddLocations, setShowAddLocations] = useState(false);\n  const [tasks, setLocationss] = useState([]);\n  useEffect(() => {\n    const getLocationss = async () => {\n      const tasksFromServer = await fetchLocationss();\n      setLocationss(tasksFromServer);\n    };\n\n    getLocationss();\n  }, []); // Fetch Locationss\n\n  const fetchLocationss = async () => {\n    const res = await fetch(\"http://localhost:5000/tasks\");\n    const data = await res.json();\n    return data;\n  }; // Fetch Locations\n\n\n  const fetchLocations = async id => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`);\n    const data = await res.json();\n    return data;\n  }; // Add Locations\n\n\n  const addLocations = async task => {\n    const res = await fetch(\"http://localhost:5000/tasks\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(task)\n    });\n    const data = await res.json();\n    setLocationss([...tasks, data]); // const id = Math.floor(Math.random() * 10000) + 1\n    // const newLocations = { id, ...task }\n    // setLocationss([...tasks, newLocations])\n  }; // Delete Locations\n\n\n  const deleteLocations = async id => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: \"DELETE\"\n    }); //We should control the response status to decide if we will change the state or not.\n\n    res.status === 200 ? setLocationss(tasks.filter(task => task.id !== id)) : alert(\"Error Deleting This Locations\");\n  }; // Toggle Reminder\n\n\n  const toggleReminder = async id => {\n    const taskToToggle = await fetchLocations(id);\n    const updLocations = { ...taskToToggle,\n      reminder: !taskToToggle.reminder\n    };\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(updLocations)\n    });\n    const data = await res.json();\n    setLocationss(tasks.map(task => task.id === id ? { ...task,\n      reminder: data.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(LocationTable, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Location, \"wH0Ic5h3/5cetoeP6t8i4uv/wo8=\");\n\n_c = Location;\nexport default Location;\n\nvar _c;\n\n$RefreshReg$(_c, \"Location\");","map":{"version":3,"sources":["/home/lilit/workspace/vtk/from_scratch_frontend_vtk/src/containers/Locations.js"],"names":["LocationTable","Location","showAddLocations","setShowAddLocations","useState","tasks","setLocationss","useEffect","getLocationss","tasksFromServer","fetchLocationss","res","fetch","data","json","fetchLocations","id","addLocations","task","method","headers","body","JSON","stringify","deleteLocations","status","filter","alert","toggleReminder","taskToToggle","updLocations","reminder","map"],"mappings":"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","sourcesContent":["import LocationTable from \"../components/LocationTable\";\nconst Location = () => {\n  const [showAddLocations, setShowAddLocations] = useState(false);\n  const [tasks, setLocationss] = useState([]);\n\n  useEffect(() => {\n    const getLocationss = async () => {\n      const tasksFromServer = await fetchLocationss();\n      setLocationss(tasksFromServer);\n    };\n\n    getLocationss();\n  }, []);\n\n  // Fetch Locationss\n  const fetchLocationss = async () => {\n    const res = await fetch(\"http://localhost:5000/tasks\");\n    const data = await res.json();\n\n    return data;\n  };\n\n  // Fetch Locations\n  const fetchLocations = async id => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`);\n    const data = await res.json();\n\n    return data;\n  };\n\n  // Add Locations\n  const addLocations = async task => {\n    const res = await fetch(\"http://localhost:5000/tasks\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(task)\n    });\n\n    const data = await res.json();\n\n    setLocationss([...tasks, data]);\n\n    // const id = Math.floor(Math.random() * 10000) + 1\n    // const newLocations = { id, ...task }\n    // setLocationss([...tasks, newLocations])\n  };\n\n  // Delete Locations\n  const deleteLocations = async id => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: \"DELETE\"\n    });\n    //We should control the response status to decide if we will change the state or not.\n    res.status === 200\n      ? setLocationss(tasks.filter(task => task.id !== id))\n      : alert(\"Error Deleting This Locations\");\n  };\n\n  // Toggle Reminder\n  const toggleReminder = async id => {\n    const taskToToggle = await fetchLocations(id);\n    const updLocations = { ...taskToToggle, reminder: !taskToToggle.reminder };\n\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(updLocations)\n    });\n\n    const data = await res.json();\n\n    setLocationss(\n      tasks.map(task =>\n        task.id === id ? { ...task, reminder: data.reminder } : task\n      )\n    );\n  };\n\n  return <LocationTable />;\n};\n\nexport default Location;\n"]},"metadata":{},"sourceType":"module"}