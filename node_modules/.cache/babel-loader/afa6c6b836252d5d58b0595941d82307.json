{"ast":null,"code":"var _jsxFileName = \"/home/lilit/workspace/vtk/from_scratch_frontend_vtk/src/containers/Locations.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useSnackbar } from \"notistack\";\nimport LocationTable from \"../components/LocationTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar moment = require(\"moment\");\n\nconst Location = () => {\n  _s();\n\n  const [showAddLocation, setShowAddLocation] = useState(false);\n  const [locations, setLocations] = useState({});\n  const {\n    enqueueSnackbar,\n    closeSnackbar\n  } = useSnackbar();\n  useEffect(() => {\n    const getLocations = async () => {\n      const locationsFromServer = await fetchLocations();\n      setLocations(locationsFromServer);\n    };\n\n    getLocations();\n  }, []); // Fetch Locations\n\n  const fetchLocations = async () => {\n    const res = await fetch(\"http://localhost:3001/api/v1/locations\");\n    const data = await res.json();\n    console.log({\n      data\n    });\n    let columns = [];\n    let rows = data.locations.rows;\n    let locColumns = [];\n    if (data.locations.count > 0) locColumns = Object.keys(data.locations.rows[0]);\n    locColumns.map(item => {\n      let obj = {};\n\n      switch (item) {\n        case \"id\":\n          obj.headerName = \"ID\";\n          obj.field = item;\n          break;\n\n        case \"number\":\n          obj.headerName = \"Номер\";\n          obj.field = item;\n          break;\n\n        case \"name\":\n          obj.headerName = \"Название\";\n          obj.field = item;\n          obj.flex = 0.3;\n          break;\n\n        case \"createdAt\":\n          obj.headerName = \"Дата создания\";\n          obj.field = item;\n          obj.flex = 0.2;\n          break;\n\n        case \"updatedAt\":\n          obj.headerName = \"Дата редактирования\";\n          obj.field = item;\n          obj.flex = 0.3;\n          break;\n\n        case \"note\":\n          obj.headerName = \"Примечание\";\n          obj.field = item;\n          obj.flex = 0.3;\n          break;\n      }\n\n      if (data.locations.count > 0 && item !== \"deletedAt\") {\n        columns.push(obj);\n      }\n    });\n    let locations = {};\n    locations.rows = rows.map(row => {\n      row.createdAt = moment(row.createdAt).format(\"YYYY.MM.DD HH:mm\");\n      row.updatedAt = moment(row.updatedAt).format(\"YYYY.MM.DD HH:mm\");\n      return row;\n    });\n    locations.columns = columns;\n    return locations;\n  }; // // Fetch Location\n  // const fetchLocation = async id => {\n  //   const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`);\n  //   const data = await res.json();\n  //\n  //   return data;\n  // };\n  // Add Location\n\n\n  const addLocation = async location => {\n    console.log({\n      location\n    });\n\n    try {\n      const res = await fetch(\"http://localhost:3001/api/v1/locations/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(location)\n      });\n      const data = await res.json();\n      console.log({\n        data\n      });\n      if (data[\"Bad Request\"]) throw new Error(data[\"Bad Request\"]);\n      if (data[\"errorMesage\"]) throw new Error(data[\"errorMesage\"]);\n      setLocations([...locations, data]);\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    } // const id = Math.floor(Math.random() * 10000) + 1\n    // const newLocation = { id, ...location }\n    // setLocations([...locations, newLocation])\n\n  };\n\n  const deleteLocation = async id => {\n    console.log(\"deleteLocation\", id);\n  }; // // Delete Location\n  // const deleteLocation = async id => {\n  //   const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`, {\n  //     method: \"DELETE\"\n  //   });\n  //   //We should control the response status to decide if we will change the state or not.\n  //   res.status === 200\n  //     ? setLocations(locations.filter(location => location.id !== id))\n  //     : alert(\"Error Deleting This Location\");\n  // };\n  // // Toggle Reminder\n  // const toggleReminder = async id => {\n  //   const locationToToggle = await fetchLocation(id);\n  //   const updLocation = {\n  //     ...locationToToggle,\n  //     reminder: !locationToToggle.reminder\n  //   };\n  //\n  //   const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`, {\n  //     method: \"PUT\",\n  //     headers: {\n  //       \"Content-type\": \"application/json\"\n  //     },\n  //     body: JSON.stringify(updLocation)\n  //   });\n  //\n  //   const data = await res.json();\n  //\n  //   setLocations(\n  //     locations.map(location =>\n  //       location.id === id ? { ...location, reminder: data.reminder } : location\n  //     )\n  //   );\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(LocationTable, {\n    locations: locations,\n    handleDeleteRow: deleteLocation,\n    addLocation: addLocation\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Location, \"8gBM8e1aT2qDtQMWHHjWFZ4cjgI=\", false, function () {\n  return [useSnackbar];\n});\n\n_c = Location;\nexport default Location;\n\nvar _c;\n\n$RefreshReg$(_c, \"Location\");","map":{"version":3,"sources":["/home/lilit/workspace/vtk/from_scratch_frontend_vtk/src/containers/Locations.js"],"names":["useState","useEffect","useSnackbar","LocationTable","moment","require","Location","showAddLocation","setShowAddLocation","locations","setLocations","enqueueSnackbar","closeSnackbar","getLocations","locationsFromServer","fetchLocations","res","fetch","data","json","console","log","columns","rows","locColumns","count","Object","keys","map","item","obj","headerName","field","flex","push","row","createdAt","format","updatedAt","addLocation","location","method","headers","body","JSON","stringify","Error","err","variant","anchorOrigin","vertical","horizontal","deleteLocation","id"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useSnackbar } from \"notistack\";\nimport LocationTable from \"../components/LocationTable\";\nvar moment = require(\"moment\");\n\nconst Location = () => {\n  const [showAddLocation, setShowAddLocation] = useState(false);\n  const [locations, setLocations] = useState({});\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n  useEffect(() => {\n    const getLocations = async () => {\n      const locationsFromServer = await fetchLocations();\n      setLocations(locationsFromServer);\n    };\n    getLocations();\n  }, []);\n\n  // Fetch Locations\n  const fetchLocations = async () => {\n    const res = await fetch(\"http://localhost:3001/api/v1/locations\");\n    const data = await res.json();\n    console.log({ data });\n    let columns = [];\n    let rows = data.locations.rows;\n    let locColumns = [];\n    if (data.locations.count > 0)\n      locColumns = Object.keys(data.locations.rows[0]);\n\n    locColumns.map(item => {\n      let obj = {};\n      switch (item) {\n        case \"id\":\n          obj.headerName = \"ID\";\n          obj.field = item;\n          break;\n        case \"number\":\n          obj.headerName = \"Номер\";\n          obj.field = item;\n          break;\n        case \"name\":\n          obj.headerName = \"Название\";\n          obj.field = item;\n          obj.flex = 0.3;\n          break;\n        case \"createdAt\":\n          obj.headerName = \"Дата создания\";\n          obj.field = item;\n          obj.flex = 0.2;\n          break;\n        case \"updatedAt\":\n          obj.headerName = \"Дата редактирования\";\n          obj.field = item;\n          obj.flex = 0.3;\n          break;\n        case \"note\":\n          obj.headerName = \"Примечание\";\n          obj.field = item;\n          obj.flex = 0.3;\n          break;\n      }\n      if (data.locations.count > 0 && item !== \"deletedAt\") {\n        columns.push(obj);\n      }\n    });\n\n    let locations = {};\n    locations.rows = rows.map(row => {\n      row.createdAt = moment(row.createdAt).format(\"YYYY.MM.DD HH:mm\");\n      row.updatedAt = moment(row.updatedAt).format(\"YYYY.MM.DD HH:mm\");\n      return row;\n    });\n    locations.columns = columns;\n    return locations;\n  };\n\n  // // Fetch Location\n  // const fetchLocation = async id => {\n  //   const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`);\n  //   const data = await res.json();\n  //\n  //   return data;\n  // };\n\n  // Add Location\n  const addLocation = async location => {\n    console.log({ location });\n    try {\n      const res = await fetch(\"http://localhost:3001/api/v1/locations/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(location)\n      });\n\n      const data = await res.json();\n      console.log({ data });\n      if (data[\"Bad Request\"]) throw new Error(data[\"Bad Request\"]);\n      if (data[\"errorMesage\"]) throw new Error(data[\"errorMesage\"]);\n      setLocations([...locations, data]);\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n\n    // const id = Math.floor(Math.random() * 10000) + 1\n    // const newLocation = { id, ...location }\n    // setLocations([...locations, newLocation])\n  };\n  const deleteLocation = async id => {\n    console.log(\"deleteLocation\", id);\n  };\n\n  // // Delete Location\n  // const deleteLocation = async id => {\n  //   const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`, {\n  //     method: \"DELETE\"\n  //   });\n  //   //We should control the response status to decide if we will change the state or not.\n  //   res.status === 200\n  //     ? setLocations(locations.filter(location => location.id !== id))\n  //     : alert(\"Error Deleting This Location\");\n  // };\n\n  // // Toggle Reminder\n  // const toggleReminder = async id => {\n  //   const locationToToggle = await fetchLocation(id);\n  //   const updLocation = {\n  //     ...locationToToggle,\n  //     reminder: !locationToToggle.reminder\n  //   };\n  //\n  //   const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`, {\n  //     method: \"PUT\",\n  //     headers: {\n  //       \"Content-type\": \"application/json\"\n  //     },\n  //     body: JSON.stringify(updLocation)\n  //   });\n  //\n  //   const data = await res.json();\n  //\n  //   setLocations(\n  //     locations.map(location =>\n  //       location.id === id ? { ...location, reminder: data.reminder } : location\n  //     )\n  //   );\n  // };\n  return (\n    <LocationTable\n      locations={locations}\n      handleDeleteRow={deleteLocation}\n      addLocation={addLocation}\n    />\n  );\n};\n\nexport default Location;\n"]},"metadata":{},"sourceType":"module"}