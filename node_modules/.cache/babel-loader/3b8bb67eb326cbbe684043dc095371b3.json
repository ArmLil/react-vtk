{"ast":null,"code":"var _jsxFileName = \"/home/lilit/workspace/vtk/from_scratch_frontend_vtk/src/containers/Locations.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport LocationTable from \"../components/LocationTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar moment = require(\"moment\");\n\nconst Location = () => {\n  _s();\n\n  const [showAddLocation, setShowAddLocation] = useState(false);\n  const [locations, setLocations] = useState({});\n  useEffect(() => {\n    let cleanupFunction = false;\n\n    const getLocations = async () => {\n      const locationsFromServer = await fetchLocations();\n      if (!cleanupFunction) setLocations(locationsFromServer);\n    };\n\n    getLocations();\n    return () => {\n      cleanupFunction = true;\n    };\n  }, []); // Fetch Locations\n\n  const fetchLocations = async () => {\n    const res = await fetch(\"http://localhost:3001/api/v1/locations\");\n    const data = await res.json();\n    console.log({\n      data\n    });\n    let columns = [];\n    let rows = data.locations.rows;\n    let locColumns = Object.keys(data.locations.rows[0]);\n\n    function preferredOrder(obj, order) {\n      var newObject = {};\n\n      for (var i = 0; i < order.length; i++) {\n        if (obj.hasOwnProperty(order[i])) {\n          newObject[order[i]] = obj[order[i]];\n        }\n      }\n\n      return newObject;\n    }\n\n    locColumns.map(item => {\n      let obj = {};\n\n      switch (item) {\n        case \"id\":\n          obj.headerName = \"ID\";\n          obj.field = item;\n          break;\n\n        case \"name\":\n          obj.headerName = \"Наименование\";\n          obj.field = item;\n          obj.flex = 0.3;\n          break;\n\n        case \"number\":\n          obj.headerName = \"Номер\";\n          obj.field = item;\n          break;\n\n        case \"createdAt\":\n          obj.headerName = \"Дата создания\";\n          obj.field = item;\n          obj.flex = 0.2;\n          break;\n\n        case \"updatedAt\":\n          obj.headerName = \"Дата редактирования\";\n          obj.field = item;\n          obj.flex = 0.3;\n          break;\n\n        case \"note\":\n          obj.headerName = \"Примечание\";\n          obj.field = item;\n          obj.flex = 0.3;\n          break;\n      }\n\n      if (Object.keys(obj).length > 0) {\n        columns.push(obj);\n      }\n    });\n    console.log(moment(\"2021-02-17T16:25:11.796Z\").format(\"YYYY.MM.DD HH:mm\"));\n    let locations = {};\n    locations.rows = rows.map(row => {\n      row.createdAt = moment(row.createdAt).format(\"YYYY.MM.DD HH:mm\");\n      row.updatedAt = moment(row.updatedAt).format(\"YYYY.MM.DD HH:mm\");\n      return row;\n    });\n    locations.columns = columns;\n    return locations;\n  }; // // Fetch Location\n  // const fetchLocation = async id => {\n  //   const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`);\n  //   const data = await res.json();\n  //\n  //   return data;\n  // };\n  // // Add Location\n  // const addLocation = async location => {\n  //   const res = await fetch(\"http://localhost:3001/api/v1/locations/\", {\n  //     method: \"POST\",\n  //     headers: {\n  //       \"Content-type\": \"application/json\"\n  //     },\n  //     body: JSON.stringify(location)\n  //   });\n  //\n  //   const data = await res.json();\n  //\n  //   setLocations([...locations, data]);\n  //\n  //   // const id = Math.floor(Math.random() * 10000) + 1\n  //   // const newLocation = { id, ...location }\n  //   // setLocations([...locations, newLocation])\n  // };\n  // // Delete Location\n  // const deleteLocation = async id => {\n  //   const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`, {\n  //     method: \"DELETE\"\n  //   });\n  //   //We should control the response status to decide if we will change the state or not.\n  //   res.status === 200\n  //     ? setLocations(locations.filter(location => location.id !== id))\n  //     : alert(\"Error Deleting This Location\");\n  // };\n  // // Toggle Reminder\n  // const toggleReminder = async id => {\n  //   const locationToToggle = await fetchLocation(id);\n  //   const updLocation = {\n  //     ...locationToToggle,\n  //     reminder: !locationToToggle.reminder\n  //   };\n  //\n  //   const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`, {\n  //     method: \"PUT\",\n  //     headers: {\n  //       \"Content-type\": \"application/json\"\n  //     },\n  //     body: JSON.stringify(updLocation)\n  //   });\n  //\n  //   const data = await res.json();\n  //\n  //   setLocations(\n  //     locations.map(location =>\n  //       location.id === id ? { ...location, reminder: data.reminder } : location\n  //     )\n  //   );\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(LocationTable, {\n    locations: locations\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Location, \"T3dIkqr55+7oOxikBbn7ul/WFdc=\");\n\n_c = Location;\nexport default Location;\n\nvar _c;\n\n$RefreshReg$(_c, \"Location\");","map":{"version":3,"sources":["/home/lilit/workspace/vtk/from_scratch_frontend_vtk/src/containers/Locations.js"],"names":["useState","useEffect","LocationTable","moment","require","Location","showAddLocation","setShowAddLocation","locations","setLocations","cleanupFunction","getLocations","locationsFromServer","fetchLocations","res","fetch","data","json","console","log","columns","rows","locColumns","Object","keys","preferredOrder","obj","order","newObject","i","length","hasOwnProperty","map","item","headerName","field","flex","push","format","row","createdAt","updatedAt"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport LocationTable from \"../components/LocationTable\";\nvar moment = require(\"moment\");\n\nconst Location = () => {\n  const [showAddLocation, setShowAddLocation] = useState(false);\n  const [locations, setLocations] = useState({});\n\n  useEffect(() => {\n    let cleanupFunction = false;\n\n    const getLocations = async () => {\n      const locationsFromServer = await fetchLocations();\n      if (!cleanupFunction) setLocations(locationsFromServer);\n    };\n    getLocations();\n\n    return () => {\n      cleanupFunction = true;\n    };\n  }, []);\n\n  // Fetch Locations\n  const fetchLocations = async () => {\n    const res = await fetch(\"http://localhost:3001/api/v1/locations\");\n    const data = await res.json();\n\n    console.log({ data });\n    let columns = [];\n    let rows = data.locations.rows;\n    let locColumns = Object.keys(data.locations.rows[0]);\n\n    function preferredOrder(obj, order) {\n      var newObject = {};\n      for (var i = 0; i < order.length; i++) {\n        if (obj.hasOwnProperty(order[i])) {\n          newObject[order[i]] = obj[order[i]];\n        }\n      }\n      return newObject;\n    }\n\n    locColumns.map(item => {\n      let obj = {};\n      switch (item) {\n        case \"id\":\n          obj.headerName = \"ID\";\n          obj.field = item;\n          break;\n        case \"name\":\n          obj.headerName = \"Наименование\";\n          obj.field = item;\n          obj.flex = 0.3;\n          break;\n        case \"number\":\n          obj.headerName = \"Номер\";\n          obj.field = item;\n          break;\n        case \"createdAt\":\n          obj.headerName = \"Дата создания\";\n          obj.field = item;\n          obj.flex = 0.2;\n          break;\n        case \"updatedAt\":\n          obj.headerName = \"Дата редактирования\";\n          obj.field = item;\n          obj.flex = 0.3;\n          break;\n        case \"note\":\n          obj.headerName = \"Примечание\";\n          obj.field = item;\n          obj.flex = 0.3;\n          break;\n      }\n      if (Object.keys(obj).length > 0) {\n        columns.push(obj);\n      }\n    });\n\n    console.log(moment(\"2021-02-17T16:25:11.796Z\").format(\"YYYY.MM.DD HH:mm\"));\n    let locations = {};\n    locations.rows = rows.map(row => {\n      row.createdAt = moment(row.createdAt).format(\"YYYY.MM.DD HH:mm\");\n      row.updatedAt = moment(row.updatedAt).format(\"YYYY.MM.DD HH:mm\");\n      return row;\n    });\n    locations.columns = columns;\n    return locations;\n  };\n\n  // // Fetch Location\n  // const fetchLocation = async id => {\n  //   const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`);\n  //   const data = await res.json();\n  //\n  //   return data;\n  // };\n\n  // // Add Location\n  // const addLocation = async location => {\n  //   const res = await fetch(\"http://localhost:3001/api/v1/locations/\", {\n  //     method: \"POST\",\n  //     headers: {\n  //       \"Content-type\": \"application/json\"\n  //     },\n  //     body: JSON.stringify(location)\n  //   });\n  //\n  //   const data = await res.json();\n  //\n  //   setLocations([...locations, data]);\n  //\n  //   // const id = Math.floor(Math.random() * 10000) + 1\n  //   // const newLocation = { id, ...location }\n  //   // setLocations([...locations, newLocation])\n  // };\n\n  // // Delete Location\n  // const deleteLocation = async id => {\n  //   const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`, {\n  //     method: \"DELETE\"\n  //   });\n  //   //We should control the response status to decide if we will change the state or not.\n  //   res.status === 200\n  //     ? setLocations(locations.filter(location => location.id !== id))\n  //     : alert(\"Error Deleting This Location\");\n  // };\n\n  // // Toggle Reminder\n  // const toggleReminder = async id => {\n  //   const locationToToggle = await fetchLocation(id);\n  //   const updLocation = {\n  //     ...locationToToggle,\n  //     reminder: !locationToToggle.reminder\n  //   };\n  //\n  //   const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`, {\n  //     method: \"PUT\",\n  //     headers: {\n  //       \"Content-type\": \"application/json\"\n  //     },\n  //     body: JSON.stringify(updLocation)\n  //   });\n  //\n  //   const data = await res.json();\n  //\n  //   setLocations(\n  //     locations.map(location =>\n  //       location.id === id ? { ...location, reminder: data.reminder } : location\n  //     )\n  //   );\n  // };\n  return <LocationTable locations={locations} />;\n};\n\nexport default Location;\n"]},"metadata":{},"sourceType":"module"}