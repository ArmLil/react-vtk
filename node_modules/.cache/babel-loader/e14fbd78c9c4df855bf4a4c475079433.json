{"ast":null,"code":"var _jsxFileName = \"/home/lilit/workspace/vtk/from_scratch_frontend_vtk/src/containers/Locations.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport LocationTable from \"../components/LocationTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Location = () => {\n  _s();\n\n  const [showAddLocation, setShowAddLocation] = useState(false);\n  const [locations, setLocations] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [rows, setRows] = useState([]);\n  useEffect(() => {\n    const getLocations = async () => {\n      const locationsFromServer = await fetchLocations();\n      console.log({\n        locationsFromServer\n      });\n      setLocations(locationsFromServer);\n    };\n\n    getLocations();\n  }, []); //\n  // const rows = [\n  //   { id: 1, lastName: \"Snow\", firstName: \"Jon\", age: 35 },\n  //   { id: 2, lastName: \"Lannister\", firstName: \"Cersei\", age: 42 },\n  //   { id: 3, lastName: \"Lannister\", firstName: \"Jaime\", age: 45 },\n  //   { id: 4, lastName: \"Stark\", firstName: \"Arya\", age: 16 },\n  //   { id: 5, lastName: \"Targaryen\", firstName: \"Daenerys\", age: null }]\n  // Fetch Locations\n\n  const fetchLocations = async () => {\n    const res = await fetch(\"http://localhost:3001/api/v1/locations\");\n    const data = await res.json();\n    console.log({\n      data\n    });\n    let columns = [];\n    let rows = data.locations.rows;\n    let locColumns = Object.keys(data.locations.rows[0]);\n    locColumns.map(item => {\n      let obj = {};\n\n      switch (item) {\n        case \"id\":\n          obj.headerName = \"ID\";\n          obj.field = item;\n          break;\n\n        case \"name\":\n          obj.headerName = \"Наименование\";\n          obj.field = item;\n          break;\n\n        case \"number\":\n          obj.headerName = \"Номер\";\n          obj.field = item;\n          break;\n\n        case \"createdAt\":\n          obj.headerName = \"Дата создания\";\n          obj.field = item;\n          break;\n\n        case \"updatedAt\":\n          obj.headerName = \"Дата редактирования\";\n          obj.field = item;\n          break;\n\n        case \"note\":\n          obj.headerName = \"Примечание\";\n          obj.field = item;\n          break;\n      }\n\n      if (Object.keys(obj).length > 0) columns.push(obj);\n    });\n    let locations = {};\n    locations.rows = rows;\n    locations.columns = columns;\n    return locations;\n  }; // // Fetch Location\n  // const fetchLocation = async id => {\n  //   const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`);\n  //   const data = await res.json();\n  //\n  //   return data;\n  // };\n  // // Add Location\n  // const addLocation = async location => {\n  //   const res = await fetch(\"http://localhost:3001/api/v1/locations/\", {\n  //     method: \"POST\",\n  //     headers: {\n  //       \"Content-type\": \"application/json\"\n  //     },\n  //     body: JSON.stringify(location)\n  //   });\n  //\n  //   const data = await res.json();\n  //\n  //   setLocations([...locations, data]);\n  //\n  //   // const id = Math.floor(Math.random() * 10000) + 1\n  //   // const newLocation = { id, ...location }\n  //   // setLocations([...locations, newLocation])\n  // };\n  // // Delete Location\n  // const deleteLocation = async id => {\n  //   const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`, {\n  //     method: \"DELETE\"\n  //   });\n  //   //We should control the response status to decide if we will change the state or not.\n  //   res.status === 200\n  //     ? setLocations(locations.filter(location => location.id !== id))\n  //     : alert(\"Error Deleting This Location\");\n  // };\n  // // Toggle Reminder\n  // const toggleReminder = async id => {\n  //   const locationToToggle = await fetchLocation(id);\n  //   const updLocation = {\n  //     ...locationToToggle,\n  //     reminder: !locationToToggle.reminder\n  //   };\n  //\n  //   const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`, {\n  //     method: \"PUT\",\n  //     headers: {\n  //       \"Content-type\": \"application/json\"\n  //     },\n  //     body: JSON.stringify(updLocation)\n  //   });\n  //\n  //   const data = await res.json();\n  //\n  //   setLocations(\n  //     locations.map(location =>\n  //       location.id === id ? { ...location, reminder: data.reminder } : location\n  //     )\n  //   );\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(LocationTable, {\n    locations: locations\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Location, \"S/YG4JWCpTNMJb6VODkHEnlWaq4=\");\n\n_c = Location;\nexport default Location;\n\nvar _c;\n\n$RefreshReg$(_c, \"Location\");","map":{"version":3,"sources":["/home/lilit/workspace/vtk/from_scratch_frontend_vtk/src/containers/Locations.js"],"names":["useState","useEffect","LocationTable","Location","showAddLocation","setShowAddLocation","locations","setLocations","columns","setColumns","rows","setRows","getLocations","locationsFromServer","fetchLocations","console","log","res","fetch","data","json","locColumns","Object","keys","map","item","obj","headerName","field","length","push"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport LocationTable from \"../components/LocationTable\";\n\nconst Location = () => {\n  const [showAddLocation, setShowAddLocation] = useState(false);\n  const [locations, setLocations] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [rows, setRows] = useState([]);\n\n  useEffect(() => {\n    const getLocations = async () => {\n      const locationsFromServer = await fetchLocations();\n      console.log({ locationsFromServer });\n      setLocations(locationsFromServer);\n    };\n\n    getLocations();\n  }, []);\n\n  //\n  // const rows = [\n  //   { id: 1, lastName: \"Snow\", firstName: \"Jon\", age: 35 },\n  //   { id: 2, lastName: \"Lannister\", firstName: \"Cersei\", age: 42 },\n  //   { id: 3, lastName: \"Lannister\", firstName: \"Jaime\", age: 45 },\n  //   { id: 4, lastName: \"Stark\", firstName: \"Arya\", age: 16 },\n  //   { id: 5, lastName: \"Targaryen\", firstName: \"Daenerys\", age: null }]\n\n  // Fetch Locations\n  const fetchLocations = async () => {\n    const res = await fetch(\"http://localhost:3001/api/v1/locations\");\n    const data = await res.json();\n\n    console.log({ data });\n    let columns = [];\n    let rows = data.locations.rows;\n    let locColumns = Object.keys(data.locations.rows[0]);\n    locColumns.map(item => {\n      let obj = {};\n      switch (item) {\n        case \"id\":\n          obj.headerName = \"ID\";\n          obj.field = item;\n          break;\n        case \"name\":\n          obj.headerName = \"Наименование\";\n          obj.field = item;\n          break;\n        case \"number\":\n          obj.headerName = \"Номер\";\n          obj.field = item;\n          break;\n        case \"createdAt\":\n          obj.headerName = \"Дата создания\";\n          obj.field = item;\n          break;\n        case \"updatedAt\":\n          obj.headerName = \"Дата редактирования\";\n          obj.field = item;\n          break;\n        case \"note\":\n          obj.headerName = \"Примечание\";\n          obj.field = item;\n          break;\n      }\n      if (Object.keys(obj).length > 0) columns.push(obj);\n    });\n\n    let locations = {};\n    locations.rows = rows;\n    locations.columns = columns;\n    return locations;\n  };\n\n  // // Fetch Location\n  // const fetchLocation = async id => {\n  //   const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`);\n  //   const data = await res.json();\n  //\n  //   return data;\n  // };\n\n  // // Add Location\n  // const addLocation = async location => {\n  //   const res = await fetch(\"http://localhost:3001/api/v1/locations/\", {\n  //     method: \"POST\",\n  //     headers: {\n  //       \"Content-type\": \"application/json\"\n  //     },\n  //     body: JSON.stringify(location)\n  //   });\n  //\n  //   const data = await res.json();\n  //\n  //   setLocations([...locations, data]);\n  //\n  //   // const id = Math.floor(Math.random() * 10000) + 1\n  //   // const newLocation = { id, ...location }\n  //   // setLocations([...locations, newLocation])\n  // };\n\n  // // Delete Location\n  // const deleteLocation = async id => {\n  //   const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`, {\n  //     method: \"DELETE\"\n  //   });\n  //   //We should control the response status to decide if we will change the state or not.\n  //   res.status === 200\n  //     ? setLocations(locations.filter(location => location.id !== id))\n  //     : alert(\"Error Deleting This Location\");\n  // };\n\n  // // Toggle Reminder\n  // const toggleReminder = async id => {\n  //   const locationToToggle = await fetchLocation(id);\n  //   const updLocation = {\n  //     ...locationToToggle,\n  //     reminder: !locationToToggle.reminder\n  //   };\n  //\n  //   const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`, {\n  //     method: \"PUT\",\n  //     headers: {\n  //       \"Content-type\": \"application/json\"\n  //     },\n  //     body: JSON.stringify(updLocation)\n  //   });\n  //\n  //   const data = await res.json();\n  //\n  //   setLocations(\n  //     locations.map(location =>\n  //       location.id === id ? { ...location, reminder: data.reminder } : location\n  //     )\n  //   );\n  // };\n\n  return <LocationTable locations={locations} />;\n};\n\nexport default Location;\n"]},"metadata":{},"sourceType":"module"}