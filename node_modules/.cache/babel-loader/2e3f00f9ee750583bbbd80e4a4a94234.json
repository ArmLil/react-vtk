{"ast":null,"code":"var _jsxFileName = \"/home/lilit/workspace/vtk/from_scratch_frontend_vtk/src/containers/DecimalNumbers.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useSnackbar } from \"notistack\";\nimport DecimalNumberTable from \"../components/DecimalNumber/DecimalNumberTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar moment = require(\"moment\");\n\nconst DecimalNumber = () => {\n  _s();\n\n  const [decimalNumbers, setDecimalNumbers] = useState({});\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  useEffect(() => {\n    const getDecimalNumbers = async () => {\n      const decimalNumbersFromServer = await fetchDecimalNumbers();\n      setDecimalNumbers(decimalNumbersFromServer);\n    };\n\n    getDecimalNumbers();\n  }, []); // Fetch DecimalNumbers\n\n  const fetchDecimalNumbers = async () => {\n    const res = await fetch(\"http://localhost:3001/api/v1/decimalNumbers\");\n    const data = await res.json();\n    let columns = [];\n    let rows = data.decimalNumbers.rows;\n    let locColumns = [];\n    if (data.decimalNumbers.count > 0) locColumns = Object.keys(data.decimalNumbers.rows[0]);\n    locColumns.forEach(item => {\n      let obj = {};\n\n      switch (item) {\n        case \"id\":\n          obj.headerName = \"ID\";\n          obj.field = item;\n          break;\n\n        case \"name\":\n          obj.headerName = \"Название\";\n          obj.field = item;\n          obj.flex = 0.4;\n          break;\n\n        case \"createdAt\":\n          obj.headerName = \"Дата создания\";\n          obj.field = item;\n          obj.flex = 0.2;\n          break;\n\n        case \"updatedAt\":\n          obj.headerName = \"Дата редактирования\";\n          obj.field = item;\n          obj.flex = 0.3;\n          break;\n\n        case \"note\":\n          obj.headerName = \"Примечание\";\n          obj.field = item;\n          obj.flex = 0.4;\n          break;\n\n        default:\n          break;\n      }\n\n      if (data.decimalNumbers.count > 0 && item !== \"deletedAt\") {\n        columns.push(obj);\n      }\n    });\n    let decimalNumbers = {};\n    decimalNumbers.rows = rows.map(row => {\n      row.createdAt = moment(row.createdAt).format(\"YYYY.MM.DD HH:mm\");\n      row.updatedAt = moment(row.updatedAt).format(\"YYYY.MM.DD HH:mm\");\n      return row;\n    });\n    decimalNumbers.columns = columns;\n    return decimalNumbers;\n  }; // Add DecimalNumber\n\n\n  const addDecimalNumber = async decimalNumber => {\n    console.log({\n      decimalNumber\n    }, JSON.stringify(decimalNumber));\n\n    try {\n      const res = await fetch(\"http://localhost:3001/api/v1/decimalNumbers/\", {\n        method: \"POST\",\n        body: JSON.stringify(decimalNumber),\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      });\n      const data = await res.json();\n      if (data[\"Bad Request\"]) throw new Error(data[\"Bad Request\"]);\n      if (data[\"errorMessage\"]) throw new Error(data[\"errorMessage\"]);\n      let newRows = [];\n\n      if (decimalNumbers.columns.length > 0) {\n        data.decimalNumber[0].createdAt = moment(data.decimalNumber.createdAt).format(\"YYYY.MM.DD HH:mm\");\n        data.decimalNumber[0].updatedAt = moment(data.decimalNumber.updatedAt).format(\"YYYY.MM.DD HH:mm\");\n        newRows = [...decimalNumbers.rows, data.decimalNumber[0]];\n        let newDecimalNumbers = Object.assign({}, {\n          columns: decimalNumbers.columns,\n          rows: newRows\n        });\n        setDecimalNumbers(newDecimalNumbers);\n      } else {\n        const decimalNumbersFromServer = await fetchDecimalNumbers();\n        setDecimalNumbers(decimalNumbersFromServer);\n      }\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  }; // Add DecimalNumber\n\n\n  const updateDecimalNumber = async decimalNumber => {\n    try {\n      const res = await fetch(`http://localhost:3001/api/v1/decimalNumbers/${decimalNumber.id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-decimalNumber\": \"application/json\"\n        },\n        body: JSON.stringify(decimalNumber)\n      });\n      const data = await res.json();\n      if (data[\"Bad Request\"]) throw new Error(data[\"Bad Request\"]);\n      if (data[\"errorMessage\"]) throw new Error(data[\"errorMessage\"]);\n      data.decimalNumber.createdAt = moment(data.decimalNumber.createdAt).format(\"YYYY.MM.DD HH:mm\");\n      data.decimalNumber.updatedAt = moment(data.decimalNumber.updatedAt).format(\"YYYY.MM.DD HH:mm\");\n      let newRows = [];\n\n      if (decimalNumbers.columns.length > 0) {\n        newRows = decimalNumbers.rows.map(loc => loc.id === decimalNumber.id ? data.decimalNumber : loc);\n        let newDecimalNumbers = Object.assign({}, {\n          columns: decimalNumbers.columns,\n          rows: newRows\n        });\n        setDecimalNumbers(newDecimalNumbers);\n      } else {\n        const decimalNumbersFromServer = await fetchDecimalNumbers();\n        setDecimalNumbers(decimalNumbersFromServer);\n      }\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  }; // Delete DecimalNumber\n\n\n  const deleteDecimalNumber = async parameters => {\n    try {\n      await fetch(`http://localhost:3001/api/v1/decimalNumbers/${parameters.id}`, {\n        method: \"DELETE\"\n      });\n      let newRows = decimalNumbers.rows.filter(row => row.id !== parameters.id);\n      let newDecimalNumbers = Object.assign({}, {\n        columns: decimalNumbers.columns,\n        rows: newRows\n      });\n      setDecimalNumbers(newDecimalNumbers);\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(DecimalNumberTable, {\n    decimalNumbers: decimalNumbers,\n    deleteDecimalNumber: deleteDecimalNumber,\n    addDecimalNumber: addDecimalNumber,\n    updateDecimalNumber: updateDecimalNumber\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DecimalNumber, \"I3dV+CU9MmpYx2LsJYaaFnp7L/M=\", false, function () {\n  return [useSnackbar];\n});\n\n_c = DecimalNumber;\nexport default DecimalNumber;\n\nvar _c;\n\n$RefreshReg$(_c, \"DecimalNumber\");","map":{"version":3,"sources":["/home/lilit/workspace/vtk/from_scratch_frontend_vtk/src/containers/DecimalNumbers.js"],"names":["useState","useEffect","useSnackbar","DecimalNumberTable","moment","require","DecimalNumber","decimalNumbers","setDecimalNumbers","enqueueSnackbar","getDecimalNumbers","decimalNumbersFromServer","fetchDecimalNumbers","res","fetch","data","json","columns","rows","locColumns","count","Object","keys","forEach","item","obj","headerName","field","flex","push","map","row","createdAt","format","updatedAt","addDecimalNumber","decimalNumber","console","log","JSON","stringify","method","body","headers","Error","newRows","length","newDecimalNumbers","assign","err","message","variant","anchorOrigin","vertical","horizontal","updateDecimalNumber","id","loc","deleteDecimalNumber","parameters","filter"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useSnackbar } from \"notistack\";\nimport DecimalNumberTable from \"../components/DecimalNumber/DecimalNumberTable\";\nvar moment = require(\"moment\");\n\nconst DecimalNumber = () => {\n  const [decimalNumbers, setDecimalNumbers] = useState({});\n  const { enqueueSnackbar } = useSnackbar();\n\n  useEffect(() => {\n    const getDecimalNumbers = async () => {\n      const decimalNumbersFromServer = await fetchDecimalNumbers();\n      setDecimalNumbers(decimalNumbersFromServer);\n    };\n    getDecimalNumbers();\n  }, []);\n\n  // Fetch DecimalNumbers\n  const fetchDecimalNumbers = async () => {\n    const res = await fetch(\"http://localhost:3001/api/v1/decimalNumbers\");\n    const data = await res.json();\n    let columns = [];\n    let rows = data.decimalNumbers.rows;\n    let locColumns = [];\n    if (data.decimalNumbers.count > 0)\n      locColumns = Object.keys(data.decimalNumbers.rows[0]);\n\n    locColumns.forEach(item => {\n      let obj = {};\n      switch (item) {\n        case \"id\":\n          obj.headerName = \"ID\";\n          obj.field = item;\n          break;\n        case \"name\":\n          obj.headerName = \"Название\";\n          obj.field = item;\n          obj.flex = 0.4;\n          break;\n        case \"createdAt\":\n          obj.headerName = \"Дата создания\";\n          obj.field = item;\n          obj.flex = 0.2;\n          break;\n        case \"updatedAt\":\n          obj.headerName = \"Дата редактирования\";\n          obj.field = item;\n          obj.flex = 0.3;\n          break;\n        case \"note\":\n          obj.headerName = \"Примечание\";\n          obj.field = item;\n          obj.flex = 0.4;\n          break;\n        default:\n          break;\n      }\n      if (data.decimalNumbers.count > 0 && item !== \"deletedAt\") {\n        columns.push(obj);\n      }\n    });\n\n    let decimalNumbers = {};\n    decimalNumbers.rows = rows.map(row => {\n      row.createdAt = moment(row.createdAt).format(\"YYYY.MM.DD HH:mm\");\n      row.updatedAt = moment(row.updatedAt).format(\"YYYY.MM.DD HH:mm\");\n      return row;\n    });\n    decimalNumbers.columns = columns;\n    return decimalNumbers;\n  };\n\n  // Add DecimalNumber\n  const addDecimalNumber = async decimalNumber => {\n    console.log({ decimalNumber }, JSON.stringify(decimalNumber));\n    try {\n      const res = await fetch(\"http://localhost:3001/api/v1/decimalNumbers/\", {\n        method: \"POST\",\n        body: JSON.stringify(decimalNumber),\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      });\n\n      const data = await res.json();\n      if (data[\"Bad Request\"]) throw new Error(data[\"Bad Request\"]);\n      if (data[\"errorMessage\"]) throw new Error(data[\"errorMessage\"]);\n      let newRows = [];\n      if (decimalNumbers.columns.length > 0) {\n        data.decimalNumber[0].createdAt = moment(\n          data.decimalNumber.createdAt\n        ).format(\"YYYY.MM.DD HH:mm\");\n        data.decimalNumber[0].updatedAt = moment(\n          data.decimalNumber.updatedAt\n        ).format(\"YYYY.MM.DD HH:mm\");\n        newRows = [...decimalNumbers.rows, data.decimalNumber[0]];\n        let newDecimalNumbers = Object.assign(\n          {},\n          { columns: decimalNumbers.columns, rows: newRows }\n        );\n        setDecimalNumbers(newDecimalNumbers);\n      } else {\n        const decimalNumbersFromServer = await fetchDecimalNumbers();\n        setDecimalNumbers(decimalNumbersFromServer);\n      }\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  };\n\n  // Add DecimalNumber\n  const updateDecimalNumber = async decimalNumber => {\n    try {\n      const res = await fetch(\n        `http://localhost:3001/api/v1/decimalNumbers/${decimalNumber.id}`,\n        {\n          method: \"PUT\",\n          headers: {\n            \"Content-decimalNumber\": \"application/json\"\n          },\n          body: JSON.stringify(decimalNumber)\n        }\n      );\n\n      const data = await res.json();\n      if (data[\"Bad Request\"]) throw new Error(data[\"Bad Request\"]);\n      if (data[\"errorMessage\"]) throw new Error(data[\"errorMessage\"]);\n      data.decimalNumber.createdAt = moment(\n        data.decimalNumber.createdAt\n      ).format(\"YYYY.MM.DD HH:mm\");\n      data.decimalNumber.updatedAt = moment(\n        data.decimalNumber.updatedAt\n      ).format(\"YYYY.MM.DD HH:mm\");\n      let newRows = [];\n      if (decimalNumbers.columns.length > 0) {\n        newRows = decimalNumbers.rows.map(loc =>\n          loc.id === decimalNumber.id ? data.decimalNumber : loc\n        );\n        let newDecimalNumbers = Object.assign(\n          {},\n          { columns: decimalNumbers.columns, rows: newRows }\n        );\n        setDecimalNumbers(newDecimalNumbers);\n      } else {\n        const decimalNumbersFromServer = await fetchDecimalNumbers();\n        setDecimalNumbers(decimalNumbersFromServer);\n      }\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  };\n\n  // Delete DecimalNumber\n  const deleteDecimalNumber = async parameters => {\n    try {\n      await fetch(\n        `http://localhost:3001/api/v1/decimalNumbers/${parameters.id}`,\n        {\n          method: \"DELETE\"\n        }\n      );\n\n      let newRows = decimalNumbers.rows.filter(row => row.id !== parameters.id);\n      let newDecimalNumbers = Object.assign(\n        {},\n        { columns: decimalNumbers.columns, rows: newRows }\n      );\n      setDecimalNumbers(newDecimalNumbers);\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  };\n\n  return (\n    <DecimalNumberTable\n      decimalNumbers={decimalNumbers}\n      deleteDecimalNumber={deleteDecimalNumber}\n      addDecimalNumber={addDecimalNumber}\n      updateDecimalNumber={updateDecimalNumber}\n    ></DecimalNumberTable>\n  );\n};\n\nexport default DecimalNumber;\n"]},"metadata":{},"sourceType":"module"}