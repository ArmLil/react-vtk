{"ast":null,"code":"var _jsxFileName = \"/home/lilit/workspace/vtk/from_scratch_frontend_vtk/src/containers/Locations.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useSnackbar } from \"notistack\";\nimport LocationTable from \"../components/Location/LocationTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar moment = require(\"moment\");\n\nconst Location = () => {\n  _s();\n\n  const [locations, setLocations] = useState({});\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  useEffect(() => {\n    const getLocations = async () => {\n      const locationsFromServer = await fetchLocations();\n      setLocations(locationsFromServer);\n    };\n\n    getLocations();\n  }, []); // Fetch Locations\n\n  const fetchLocations = async () => {\n    const res = await fetch(\"http://localhost:3001/api/v1/locations\");\n    const data = await res.json();\n    let columns = [];\n    let rows = data.locations.rows;\n    let locColumns = [];\n    if (data.locations.count > 0) locColumns = Object.keys(data.locations.rows[0]);\n    locColumns.forEach(item => {\n      let obj = {};\n\n      switch (item) {\n        case \"id\":\n          obj.headerName = \"ID\";\n          obj.field = item;\n          break;\n\n        case \"number\":\n          obj.headerName = \"Номер\";\n          obj.field = item;\n          break;\n\n        case \"name\":\n          obj.headerName = \"Название\";\n          obj.field = item;\n          obj.flex = 0.4;\n          break;\n\n        case \"createdAt\":\n          obj.headerName = \"Дата создания\";\n          obj.field = item;\n          obj.flex = 0.2;\n          break;\n\n        case \"updatedAt\":\n          obj.headerName = \"Дата редактирования\";\n          obj.field = item;\n          obj.flex = 0.3;\n          break;\n\n        case \"note\":\n          obj.headerName = \"Примечание\";\n          obj.field = item;\n          obj.flex = 0.4;\n          break;\n\n        default:\n          break;\n      }\n\n      if (data.locations.count > 0 && item !== \"deletedAt\") {\n        columns.push(obj);\n      }\n    });\n    let locations = {};\n    locations.rows = rows.map(row => {\n      row.createdAt = moment(row.createdAt).format(\"YYYY.MM.DD HH:mm\");\n      row.updatedAt = moment(row.updatedAt).format(\"YYYY.MM.DD HH:mm\");\n      return row;\n    });\n    locations.columns = columns;\n    return locations;\n  }; // Add Location\n\n\n  const addLocation = async location => {\n    console.log({\n      location\n    });\n\n    try {\n      const res = await fetch(\"http://localhost:3001/api/v1/locations/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(location)\n      });\n      const data = await res.json();\n      if (data[\"Bad Request\"]) throw new Error(data[\"Bad Request\"]);\n      if (data[\"errorMessage\"]) throw new Error(data[\"errorMessage\"]);\n      console.log(\"data.location[0] = \", data.location[0]);\n      let newRows = [];\n\n      if (locations.columns.length > 0) {\n        data.location[0].createdAt = moment(data.location.createdAt).format(\"YYYY.MM.DD HH:mm\");\n        data.location[0].updatedAt = moment(data.location.updatedAt).format(\"YYYY.MM.DD HH:mm\");\n        newRows = [...locations.rows, data.location[0]];\n        let newLocations = Object.assign({}, {\n          columns: locations.columns,\n          rows: newRows\n        });\n        setLocations(newLocations);\n      } else {\n        const locationsFromServer = await fetchLocations();\n        setLocations(locationsFromServer);\n      }\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  }; // Add Location\n\n\n  const updateLocation = async location => {\n    try {\n      console.log(JSON.stringify(location));\n      const res = await fetch(`http://localhost:3001/api/v1/locations/${location.id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(location)\n      });\n      const data = await res.json();\n      if (data[\"Bad Request\"]) throw new Error(data[\"Bad Request\"]);\n      if (data[\"errorMessage\"]) throw new Error(data[\"errorMessage\"]);\n      data.location.createdAt = moment(data.location.createdAt).format(\"YYYY.MM.DD HH:mm\");\n      data.location.updatedAt = moment(data.location.updatedAt).format(\"YYYY.MM.DD HH:mm\");\n      let newRows = [];\n\n      if (locations.columns.length > 0) {\n        newRows = locations.rows.map(loc => loc.id === location.id ? data.location : loc);\n        console.log({\n          newRows\n        });\n        let newLocations = Object.assign({}, {\n          columns: locations.columns,\n          rows: newRows\n        });\n        setLocations(newLocations);\n      } else {\n        const locationsFromServer = await fetchLocations();\n        setLocations(locationsFromServer);\n      }\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  }; // Delete Location\n\n\n  const deleteLocation = async parameters => {\n    try {\n      await fetch(`http://localhost:3001/api/v1/locations/${parameters.id}`, {\n        method: \"DELETE\"\n      });\n      let newRows = locations.rows.filter(row => row.id !== parameters.id);\n      let newLocations = Object.assign({}, {\n        columns: locations.columns,\n        rows: newRows\n      });\n      setLocations(newLocations);\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  }; // // Toggle Reminder\n  // const toggleReminder = async id => {\n  //   const locationToToggle = await fetchLocation(id);\n  //   const updLocation = {\n  //     ...locationToToggle,\n  //     reminder: !locationToToggle.reminder\n  //   };\n  //\n  //   const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`, {\n  //     method: \"PUT\",\n  //     headers: {\n  //       \"Content-type\": \"application/json\"\n  //     },\n  //     body: JSON.stringify(updLocation)\n  //   });\n  //\n  //   const data = await res.json();\n  //\n  //   setLocations(\n  //     locations.map(location =>\n  //       location.id === id ? { ...location, reminder: data.reminder } : location\n  //     )\n  //   );\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(LocationTable, {\n    locations: locations,\n    deleteLocation: deleteLocation,\n    addLocation: addLocation,\n    updateLocation: updateLocation\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Location, \"dmcVB789TI/a5W5YpwfYeTSO0d8=\", false, function () {\n  return [useSnackbar];\n});\n\n_c = Location;\nexport default Location;\n\nvar _c;\n\n$RefreshReg$(_c, \"Location\");","map":{"version":3,"sources":["/home/lilit/workspace/vtk/from_scratch_frontend_vtk/src/containers/Locations.js"],"names":["useState","useEffect","useSnackbar","LocationTable","moment","require","Location","locations","setLocations","enqueueSnackbar","getLocations","locationsFromServer","fetchLocations","res","fetch","data","json","columns","rows","locColumns","count","Object","keys","forEach","item","obj","headerName","field","flex","push","map","row","createdAt","format","updatedAt","addLocation","location","console","log","method","headers","body","JSON","stringify","Error","newRows","length","newLocations","assign","err","message","variant","anchorOrigin","vertical","horizontal","updateLocation","id","loc","deleteLocation","parameters","filter"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useSnackbar } from \"notistack\";\nimport LocationTable from \"../components/Location/LocationTable\";\nvar moment = require(\"moment\");\n\nconst Location = () => {\n  const [locations, setLocations] = useState({});\n  const { enqueueSnackbar } = useSnackbar();\n\n  useEffect(() => {\n    const getLocations = async () => {\n      const locationsFromServer = await fetchLocations();\n      setLocations(locationsFromServer);\n    };\n    getLocations();\n  }, []);\n\n  // Fetch Locations\n  const fetchLocations = async () => {\n    const res = await fetch(\"http://localhost:3001/api/v1/locations\");\n    const data = await res.json();\n    let columns = [];\n    let rows = data.locations.rows;\n    let locColumns = [];\n    if (data.locations.count > 0)\n      locColumns = Object.keys(data.locations.rows[0]);\n\n    locColumns.forEach(item => {\n      let obj = {};\n      switch (item) {\n        case \"id\":\n          obj.headerName = \"ID\";\n          obj.field = item;\n          break;\n        case \"number\":\n          obj.headerName = \"Номер\";\n          obj.field = item;\n          break;\n        case \"name\":\n          obj.headerName = \"Название\";\n          obj.field = item;\n          obj.flex = 0.4;\n          break;\n        case \"createdAt\":\n          obj.headerName = \"Дата создания\";\n          obj.field = item;\n          obj.flex = 0.2;\n          break;\n        case \"updatedAt\":\n          obj.headerName = \"Дата редактирования\";\n          obj.field = item;\n          obj.flex = 0.3;\n          break;\n        case \"note\":\n          obj.headerName = \"Примечание\";\n          obj.field = item;\n          obj.flex = 0.4;\n          break;\n        default:\n          break;\n      }\n      if (data.locations.count > 0 && item !== \"deletedAt\") {\n        columns.push(obj);\n      }\n    });\n\n    let locations = {};\n    locations.rows = rows.map(row => {\n      row.createdAt = moment(row.createdAt).format(\"YYYY.MM.DD HH:mm\");\n      row.updatedAt = moment(row.updatedAt).format(\"YYYY.MM.DD HH:mm\");\n      return row;\n    });\n    locations.columns = columns;\n    return locations;\n  };\n\n  // Add Location\n  const addLocation = async location => {\n    console.log({ location });\n    try {\n      const res = await fetch(\"http://localhost:3001/api/v1/locations/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(location)\n      });\n\n      const data = await res.json();\n      if (data[\"Bad Request\"]) throw new Error(data[\"Bad Request\"]);\n      if (data[\"errorMessage\"]) throw new Error(data[\"errorMessage\"]);\n      console.log(\"data.location[0] = \", data.location[0]);\n      let newRows = [];\n      if (locations.columns.length > 0) {\n        data.location[0].createdAt = moment(data.location.createdAt).format(\n          \"YYYY.MM.DD HH:mm\"\n        );\n        data.location[0].updatedAt = moment(data.location.updatedAt).format(\n          \"YYYY.MM.DD HH:mm\"\n        );\n        newRows = [...locations.rows, data.location[0]];\n        let newLocations = Object.assign(\n          {},\n          { columns: locations.columns, rows: newRows }\n        );\n        setLocations(newLocations);\n      } else {\n        const locationsFromServer = await fetchLocations();\n        setLocations(locationsFromServer);\n      }\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  };\n\n  // Add Location\n  const updateLocation = async location => {\n    try {\n      console.log(JSON.stringify(location));\n      const res = await fetch(\n        `http://localhost:3001/api/v1/locations/${location.id}`,\n        {\n          method: \"PUT\",\n          headers: {\n            \"Content-type\": \"application/json\"\n          },\n          body: JSON.stringify(location)\n        }\n      );\n\n      const data = await res.json();\n      if (data[\"Bad Request\"]) throw new Error(data[\"Bad Request\"]);\n      if (data[\"errorMessage\"]) throw new Error(data[\"errorMessage\"]);\n      data.location.createdAt = moment(data.location.createdAt).format(\n        \"YYYY.MM.DD HH:mm\"\n      );\n      data.location.updatedAt = moment(data.location.updatedAt).format(\n        \"YYYY.MM.DD HH:mm\"\n      );\n      let newRows = [];\n      if (locations.columns.length > 0) {\n        newRows = locations.rows.map(loc =>\n          loc.id === location.id ? data.location : loc\n        );\n        console.log({ newRows });\n        let newLocations = Object.assign(\n          {},\n          { columns: locations.columns, rows: newRows }\n        );\n        setLocations(newLocations);\n      } else {\n        const locationsFromServer = await fetchLocations();\n        setLocations(locationsFromServer);\n      }\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  };\n\n  // Delete Location\n  const deleteLocation = async parameters => {\n    try {\n      await fetch(`http://localhost:3001/api/v1/locations/${parameters.id}`, {\n        method: \"DELETE\"\n      });\n\n      let newRows = locations.rows.filter(row => row.id !== parameters.id);\n      let newLocations = Object.assign(\n        {},\n        { columns: locations.columns, rows: newRows }\n      );\n      setLocations(newLocations);\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  };\n\n  // // Toggle Reminder\n  // const toggleReminder = async id => {\n  //   const locationToToggle = await fetchLocation(id);\n  //   const updLocation = {\n  //     ...locationToToggle,\n  //     reminder: !locationToToggle.reminder\n  //   };\n  //\n  //   const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`, {\n  //     method: \"PUT\",\n  //     headers: {\n  //       \"Content-type\": \"application/json\"\n  //     },\n  //     body: JSON.stringify(updLocation)\n  //   });\n  //\n  //   const data = await res.json();\n  //\n  //   setLocations(\n  //     locations.map(location =>\n  //       location.id === id ? { ...location, reminder: data.reminder } : location\n  //     )\n  //   );\n  // };\n  return (\n    <LocationTable\n      locations={locations}\n      deleteLocation={deleteLocation}\n      addLocation={addLocation}\n      updateLocation={updateLocation}\n    ></LocationTable>\n  );\n};\n\nexport default Location;\n"]},"metadata":{},"sourceType":"module"}