{"ast":null,"code":"var _jsxFileName = \"/home/lilit/workspace/vtk/from_scratch_frontend_vtk/src/containers/Locations.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport LocationTable from \"../components/LocationTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Location = () => {\n  _s();\n\n  const [showAddLocation, setShowAddLocation] = useState(false);\n  const [locations, setLocations] = useState([]);\n  useEffect(() => {\n    const getLocations = async () => {\n      const locationsFromServer = await fetchLocations();\n      setLocations(locationsFromServer);\n    };\n\n    getLocations();\n  }, []); // Fetch Locations\n\n  const fetchLocations = async () => {\n    const res = await fetch(\"http://localhost:3001/api/v1/locations\");\n    const data = await res.json();\n    return data;\n  }; // Fetch Location\n\n\n  const fetchLocation = async id => {\n    const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`);\n    const data = await res.json();\n    return data;\n  }; // Add Location\n\n\n  const addLocation = async task => {\n    const res = await fetch(\"http://localhost:3001/api/v1/locations/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(task)\n    });\n    const data = await res.json();\n    setLocations([...locations, data]); // const id = Math.floor(Math.random() * 10000) + 1\n    // const newLocation = { id, ...task }\n    // setLocations([...locations, newLocation])\n  }; // Delete Location\n\n\n  const deleteLocation = async id => {\n    const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`, {\n      method: \"DELETE\"\n    }); //We should control the response status to decide if we will change the state or not.\n\n    res.status === 200 ? setLocations(locations.filter(task => task.id !== id)) : alert(\"Error Deleting This Location\");\n  }; // Toggle Reminder\n\n\n  const toggleReminder = async id => {\n    const taskToToggle = await fetchLocation(id);\n    const updLocation = { ...taskToToggle,\n      reminder: !taskToToggle.reminder\n    };\n    const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(updLocation)\n    });\n    const data = await res.json();\n    setLocations(locations.map(task => task.id === id ? { ...task,\n      reminder: data.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(LocationTable, {\n    locations: locations\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Location, \"tRJlIrGaogbeUdcwZ576iXGGUZQ=\");\n\n_c = Location;\nexport default Location;\n\nvar _c;\n\n$RefreshReg$(_c, \"Location\");","map":{"version":3,"sources":["/home/lilit/workspace/vtk/from_scratch_frontend_vtk/src/containers/Locations.js"],"names":["useState","useEffect","LocationTable","Location","showAddLocation","setShowAddLocation","locations","setLocations","getLocations","locationsFromServer","fetchLocations","res","fetch","data","json","fetchLocation","id","addLocation","task","method","headers","body","JSON","stringify","deleteLocation","status","filter","alert","toggleReminder","taskToToggle","updLocation","reminder","map"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport LocationTable from \"../components/LocationTable\";\n\nconst Location = () => {\n  const [showAddLocation, setShowAddLocation] = useState(false);\n  const [locations, setLocations] = useState([]);\n\n  useEffect(() => {\n    const getLocations = async () => {\n      const locationsFromServer = await fetchLocations();\n      setLocations(locationsFromServer);\n    };\n\n    getLocations();\n  }, []);\n\n  // Fetch Locations\n  const fetchLocations = async () => {\n    const res = await fetch(\"http://localhost:3001/api/v1/locations\");\n    const data = await res.json();\n\n    return data;\n  };\n\n  // Fetch Location\n  const fetchLocation = async id => {\n    const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`);\n    const data = await res.json();\n\n    return data;\n  };\n\n  // Add Location\n  const addLocation = async task => {\n    const res = await fetch(\"http://localhost:3001/api/v1/locations/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(task)\n    });\n\n    const data = await res.json();\n\n    setLocations([...locations, data]);\n\n    // const id = Math.floor(Math.random() * 10000) + 1\n    // const newLocation = { id, ...task }\n    // setLocations([...locations, newLocation])\n  };\n\n  // Delete Location\n  const deleteLocation = async id => {\n    const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`, {\n      method: \"DELETE\"\n    });\n    //We should control the response status to decide if we will change the state or not.\n    res.status === 200\n      ? setLocations(locations.filter(task => task.id !== id))\n      : alert(\"Error Deleting This Location\");\n  };\n\n  // Toggle Reminder\n  const toggleReminder = async id => {\n    const taskToToggle = await fetchLocation(id);\n    const updLocation = { ...taskToToggle, reminder: !taskToToggle.reminder };\n\n    const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(updLocation)\n    });\n\n    const data = await res.json();\n\n    setLocations(\n      locations.map(task =>\n        task.id === id ? { ...task, reminder: data.reminder } : task\n      )\n    );\n  };\n\n  return <LocationTable locations={locations} />;\n};\n\nexport default Location;\n"]},"metadata":{},"sourceType":"module"}