{"ast":null,"code":"var _jsxFileName = \"/home/lilit/workspace/vtk/from_scratch_frontend_vtk/src/containers/Locations.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport LocationTable from \"../components/LocationTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Location = () => {\n  _s();\n\n  const [showAddLocation, setShowAddLocation] = useState(false);\n  const [locations, setLocations] = useState([]);\n  useEffect(() => {\n    const getLocations = async () => {\n      const locationsFromServer = await fetchLocations();\n      setLocations(locationsFromServer);\n    };\n\n    getLocations();\n  }, []); //\n  // const rows = [\n  //   { id: 1, lastName: \"Snow\", firstName: \"Jon\", age: 35 },\n  //   { id: 2, lastName: \"Lannister\", firstName: \"Cersei\", age: 42 },\n  //   { id: 3, lastName: \"Lannister\", firstName: \"Jaime\", age: 45 },\n  //   { id: 4, lastName: \"Stark\", firstName: \"Arya\", age: 16 },\n  //   { id: 5, lastName: \"Targaryen\", firstName: \"Daenerys\", age: null }]\n  // Fetch Locations\n\n  const fetchLocations = async () => {\n    const res = await fetch(\"http://localhost:3001/api/v1/locations\");\n    const data = await res.json();\n    console.log({\n      data\n    });\n    let columns = [];\n    let rows = data.locations.rows; // const columns: ColDef[] = [\n    //   { field: \"id\", headerName: \"ID\" },\n    //   { field: \"firstName\", headerName: \"First name\", flex: 0.1 },\n    //   { field: \"lastName\", headerName: \"Last name\", flex: 0.1 },\n    //   {\n    //     field: \"age\",\n    //     headerName: \"Age\",\n    //     type: \"number\"\n    //   }\n    //\n    // ];\n    // loc:\n    //   createdAt: \"2021-02-17T16:24:16.772Z\"\n    //   deletedAt: null\n    //   id: 2\n    //   name: \"location 2\"\n    //   note: \"note location 02\"\n    //   number: 102\n    //   updatedAt: \"2021-02-17T16:2\n\n    let locColumns = Object.keys(data.locations.rows[0]);\n    locColumns.map(item => {\n      let obj = {};\n\n      switch (item) {\n        case \"id\":\n          obj.headerName = \"ID\";\n          obj.field = item;\n          break;\n\n        case \"name\":\n          obj.headerName = \"Наименование\";\n          obj.field = item;\n          break;\n\n        case \"number\":\n          obj.headerName = \"Номер\";\n          obj.field = item;\n          break;\n\n        case \"createdAt\":\n          obj.headerName = \"Дата создания\";\n          obj.field = item;\n          break;\n\n        case \"updatedAt\":\n          obj.headerName = \"Дата редактирования\";\n          obj.field = item;\n          break;\n\n        case \"note\":\n          obj.headerName = \"Примечание\";\n          obj.field = item;\n          break;\n      }\n\n      if (Object.keys(obj).length === 0) columns.push(obj);\n    });\n    console.log({\n      columns\n    });\n    console.log({\n      rows\n    });\n    return data;\n  }; // Fetch Location\n\n\n  const fetchLocation = async id => {\n    const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`);\n    const data = await res.json();\n    return data;\n  }; // Add Location\n\n\n  const addLocation = async location => {\n    const res = await fetch(\"http://localhost:3001/api/v1/locations/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(location)\n    });\n    const data = await res.json();\n    setLocations([...locations, data]); // const id = Math.floor(Math.random() * 10000) + 1\n    // const newLocation = { id, ...location }\n    // setLocations([...locations, newLocation])\n  }; // Delete Location\n\n\n  const deleteLocation = async id => {\n    const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`, {\n      method: \"DELETE\"\n    }); //We should control the response status to decide if we will change the state or not.\n\n    res.status === 200 ? setLocations(locations.filter(location => location.id !== id)) : alert(\"Error Deleting This Location\");\n  }; // Toggle Reminder\n\n\n  const toggleReminder = async id => {\n    const locationToToggle = await fetchLocation(id);\n    const updLocation = { ...locationToToggle,\n      reminder: !locationToToggle.reminder\n    };\n    const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(updLocation)\n    });\n    const data = await res.json();\n    setLocations(locations.map(location => location.id === id ? { ...location,\n      reminder: data.reminder\n    } : location));\n  };\n\n  return /*#__PURE__*/_jsxDEV(LocationTable, {\n    locations: locations\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Location, \"tRJlIrGaogbeUdcwZ576iXGGUZQ=\");\n\n_c = Location;\nexport default Location;\n\nvar _c;\n\n$RefreshReg$(_c, \"Location\");","map":{"version":3,"sources":["/home/lilit/workspace/vtk/from_scratch_frontend_vtk/src/containers/Locations.js"],"names":["useState","useEffect","LocationTable","Location","showAddLocation","setShowAddLocation","locations","setLocations","getLocations","locationsFromServer","fetchLocations","res","fetch","data","json","console","log","columns","rows","locColumns","Object","keys","map","item","obj","headerName","field","length","push","fetchLocation","id","addLocation","location","method","headers","body","JSON","stringify","deleteLocation","status","filter","alert","toggleReminder","locationToToggle","updLocation","reminder"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport LocationTable from \"../components/LocationTable\";\n\nconst Location = () => {\n  const [showAddLocation, setShowAddLocation] = useState(false);\n  const [locations, setLocations] = useState([]);\n\n  useEffect(() => {\n    const getLocations = async () => {\n      const locationsFromServer = await fetchLocations();\n      setLocations(locationsFromServer);\n    };\n\n    getLocations();\n  }, []);\n\n  //\n  // const rows = [\n  //   { id: 1, lastName: \"Snow\", firstName: \"Jon\", age: 35 },\n  //   { id: 2, lastName: \"Lannister\", firstName: \"Cersei\", age: 42 },\n  //   { id: 3, lastName: \"Lannister\", firstName: \"Jaime\", age: 45 },\n  //   { id: 4, lastName: \"Stark\", firstName: \"Arya\", age: 16 },\n  //   { id: 5, lastName: \"Targaryen\", firstName: \"Daenerys\", age: null }]\n\n  // Fetch Locations\n  const fetchLocations = async () => {\n    const res = await fetch(\"http://localhost:3001/api/v1/locations\");\n    const data = await res.json();\n\n    console.log({ data });\n    let columns = [];\n    let rows = data.locations.rows;\n\n    // const columns: ColDef[] = [\n    //   { field: \"id\", headerName: \"ID\" },\n    //   { field: \"firstName\", headerName: \"First name\", flex: 0.1 },\n    //   { field: \"lastName\", headerName: \"Last name\", flex: 0.1 },\n    //   {\n    //     field: \"age\",\n    //     headerName: \"Age\",\n    //     type: \"number\"\n    //   }\n    //\n    // ];\n\n    // loc:\n    //   createdAt: \"2021-02-17T16:24:16.772Z\"\n    //   deletedAt: null\n    //   id: 2\n    //   name: \"location 2\"\n    //   note: \"note location 02\"\n    //   number: 102\n    //   updatedAt: \"2021-02-17T16:2\n    let locColumns = Object.keys(data.locations.rows[0]);\n    locColumns.map(item => {\n      let obj = {};\n      switch (item) {\n        case \"id\":\n          obj.headerName = \"ID\";\n          obj.field = item;\n          break;\n        case \"name\":\n          obj.headerName = \"Наименование\";\n          obj.field = item;\n          break;\n        case \"number\":\n          obj.headerName = \"Номер\";\n          obj.field = item;\n          break;\n        case \"createdAt\":\n          obj.headerName = \"Дата создания\";\n          obj.field = item;\n          break;\n        case \"updatedAt\":\n          obj.headerName = \"Дата редактирования\";\n          obj.field = item;\n          break;\n        case \"note\":\n          obj.headerName = \"Примечание\";\n          obj.field = item;\n          break;\n      }\n      if (Object.keys(obj).length === 0) columns.push(obj);\n    });\n\n    console.log({ columns });\n    console.log({ rows });\n    return data;\n  };\n\n  // Fetch Location\n  const fetchLocation = async id => {\n    const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`);\n    const data = await res.json();\n\n    return data;\n  };\n\n  // Add Location\n  const addLocation = async location => {\n    const res = await fetch(\"http://localhost:3001/api/v1/locations/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(location)\n    });\n\n    const data = await res.json();\n\n    setLocations([...locations, data]);\n\n    // const id = Math.floor(Math.random() * 10000) + 1\n    // const newLocation = { id, ...location }\n    // setLocations([...locations, newLocation])\n  };\n\n  // Delete Location\n  const deleteLocation = async id => {\n    const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`, {\n      method: \"DELETE\"\n    });\n    //We should control the response status to decide if we will change the state or not.\n    res.status === 200\n      ? setLocations(locations.filter(location => location.id !== id))\n      : alert(\"Error Deleting This Location\");\n  };\n\n  // Toggle Reminder\n  const toggleReminder = async id => {\n    const locationToToggle = await fetchLocation(id);\n    const updLocation = {\n      ...locationToToggle,\n      reminder: !locationToToggle.reminder\n    };\n\n    const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(updLocation)\n    });\n\n    const data = await res.json();\n\n    setLocations(\n      locations.map(location =>\n        location.id === id ? { ...location, reminder: data.reminder } : location\n      )\n    );\n  };\n\n  return <LocationTable locations={locations} />;\n};\n\nexport default Location;\n"]},"metadata":{},"sourceType":"module"}