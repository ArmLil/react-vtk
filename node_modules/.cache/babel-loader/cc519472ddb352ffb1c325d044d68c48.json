{"ast":null,"code":"var _jsxFileName = \"/home/lilit/workspace/vtk/from_scratch_frontend_vtk/src/containers/Types.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useSnackbar } from \"notistack\";\nimport TypeTable from \"../components/Type/TypeTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar moment = require(\"moment\");\n\nconst Type = () => {\n  _s();\n\n  const [types, setTypes] = useState({});\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  useEffect(() => {\n    const getTypes = async () => {\n      const typesFromServer = await fetchTypes();\n      setTypes(typesFromServer);\n    };\n\n    getTypes();\n  }, []); // Fetch Types\n\n  const fetchTypes = async () => {\n    const res = await fetch(\"http://localhost:3001/api/v1/types\");\n    const data = await res.json();\n    let columns = [];\n    let rows = data.types.rows;\n    let locColumns = [];\n    if (data.types.count > 0) locColumns = Object.keys(data.types.rows[0]);\n    locColumns.forEach(item => {\n      let obj = {};\n\n      switch (item) {\n        case \"id\":\n          obj.headerName = \"ID\";\n          obj.field = item;\n          break;\n\n        case \"number\":\n          obj.headerName = \"Номер\";\n          obj.field = item;\n          break;\n\n        case \"name\":\n          obj.headerName = \"Название\";\n          obj.field = item;\n          obj.flex = 0.4;\n          break;\n\n        case \"createdAt\":\n          obj.headerName = \"Дата создания\";\n          obj.field = item;\n          obj.flex = 0.2;\n          break;\n\n        case \"updatedAt\":\n          obj.headerName = \"Дата редактирования\";\n          obj.field = item;\n          obj.flex = 0.3;\n          break;\n\n        case \"note\":\n          obj.headerName = \"Примечание\";\n          obj.field = item;\n          obj.flex = 0.4;\n          break;\n\n        default:\n          break;\n      }\n\n      if (data.types.count > 0 && item !== \"deletedAt\") {\n        columns.push(obj);\n      }\n    });\n    let types = {};\n    types.rows = rows.map(row => {\n      row.createdAt = moment(row.createdAt).format(\"YYYY.MM.DD HH:mm\");\n      row.updatedAt = moment(row.updatedAt).format(\"YYYY.MM.DD HH:mm\");\n      return row;\n    });\n    types.columns = columns;\n    return types;\n  }; // Add Type\n\n\n  const addType = async type => {\n    try {\n      const res = await fetch(\"http://localhost:3001/api/v1/types/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(type)\n      });\n      const data = await res.json();\n      if (data[\"Bad Request\"]) throw new Error(data[\"Bad Request\"]);\n      if (data[\"errorMessage\"]) throw new Error(data[\"errorMessage\"]);\n      let newRows = [];\n\n      if (types.columns.length > 0) {\n        data.type[0].createdAt = moment(data.type.createdAt).format(\"YYYY.MM.DD HH:mm\");\n        data.type[0].updatedAt = moment(data.type.updatedAt).format(\"YYYY.MM.DD HH:mm\");\n        newRows = [...types.rows, data.type[0]];\n        let newTypes = Object.assign({}, {\n          columns: types.columns,\n          rows: newRows\n        });\n        setTypes(newTypes);\n      } else {\n        const typesFromServer = await fetchTypes();\n        setTypes(typesFromServer);\n      }\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  }; // Add Type\n\n\n  const updateType = async type => {\n    try {\n      console.log(JSON.stringify(type));\n      const res = await fetch(`http://localhost:3001/api/v1/types/${type.id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(type)\n      });\n      const data = await res.json();\n      if (data[\"Bad Request\"]) throw new Error(data[\"Bad Request\"]);\n      if (data[\"errorMessage\"]) throw new Error(data[\"errorMessage\"]);\n      data.type.createdAt = moment(data.type.createdAt).format(\"YYYY.MM.DD HH:mm\");\n      data.type.updatedAt = moment(data.type.updatedAt).format(\"YYYY.MM.DD HH:mm\");\n      let newRows = [];\n\n      if (types.columns.length > 0) {\n        newRows = types.rows.map(loc => loc.id === type.id ? data.type : loc);\n        let newTypes = Object.assign({}, {\n          columns: types.columns,\n          rows: newRows\n        });\n        setTypes(newTypes);\n      } else {\n        const typesFromServer = await fetchTypes();\n        setTypes(typesFromServer);\n      }\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  }; // Delete Type\n\n\n  const deleteType = async parameters => {\n    try {\n      await fetch(`http://localhost:3001/api/v1/types/${parameters.id}`, {\n        method: \"DELETE\"\n      });\n      let newRows = types.rows.filter(row => row.id !== parameters.id);\n      let newTypes = Object.assign({}, {\n        columns: types.columns,\n        rows: newRows\n      });\n      setTypes(newTypes);\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(TypeTable, {\n    types: types,\n    deleteType: deleteType,\n    addType: addType,\n    updateType: updateType\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Type, \"xS6KgX1RT49BXA5MbGKvc0qGw/M=\", false, function () {\n  return [useSnackbar];\n});\n\n_c = Type;\nexport default Type;\n\nvar _c;\n\n$RefreshReg$(_c, \"Type\");","map":{"version":3,"sources":["/home/lilit/workspace/vtk/from_scratch_frontend_vtk/src/containers/Types.js"],"names":["useState","useEffect","useSnackbar","TypeTable","moment","require","Type","types","setTypes","enqueueSnackbar","getTypes","typesFromServer","fetchTypes","res","fetch","data","json","columns","rows","locColumns","count","Object","keys","forEach","item","obj","headerName","field","flex","push","map","row","createdAt","format","updatedAt","addType","type","method","headers","body","JSON","stringify","Error","newRows","length","newTypes","assign","err","console","log","message","variant","anchorOrigin","vertical","horizontal","updateType","id","loc","deleteType","parameters","filter"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useSnackbar } from \"notistack\";\nimport TypeTable from \"../components/Type/TypeTable\";\nvar moment = require(\"moment\");\n\nconst Type = () => {\n  const [types, setTypes] = useState({});\n  const { enqueueSnackbar } = useSnackbar();\n\n  useEffect(() => {\n    const getTypes = async () => {\n      const typesFromServer = await fetchTypes();\n      setTypes(typesFromServer);\n    };\n    getTypes();\n  }, []);\n\n  // Fetch Types\n  const fetchTypes = async () => {\n    const res = await fetch(\"http://localhost:3001/api/v1/types\");\n    const data = await res.json();\n    let columns = [];\n    let rows = data.types.rows;\n    let locColumns = [];\n    if (data.types.count > 0) locColumns = Object.keys(data.types.rows[0]);\n\n    locColumns.forEach(item => {\n      let obj = {};\n      switch (item) {\n        case \"id\":\n          obj.headerName = \"ID\";\n          obj.field = item;\n          break;\n        case \"number\":\n          obj.headerName = \"Номер\";\n          obj.field = item;\n          break;\n        case \"name\":\n          obj.headerName = \"Название\";\n          obj.field = item;\n          obj.flex = 0.4;\n          break;\n        case \"createdAt\":\n          obj.headerName = \"Дата создания\";\n          obj.field = item;\n          obj.flex = 0.2;\n          break;\n        case \"updatedAt\":\n          obj.headerName = \"Дата редактирования\";\n          obj.field = item;\n          obj.flex = 0.3;\n          break;\n        case \"note\":\n          obj.headerName = \"Примечание\";\n          obj.field = item;\n          obj.flex = 0.4;\n          break;\n        default:\n          break;\n      }\n      if (data.types.count > 0 && item !== \"deletedAt\") {\n        columns.push(obj);\n      }\n    });\n\n    let types = {};\n    types.rows = rows.map(row => {\n      row.createdAt = moment(row.createdAt).format(\"YYYY.MM.DD HH:mm\");\n      row.updatedAt = moment(row.updatedAt).format(\"YYYY.MM.DD HH:mm\");\n      return row;\n    });\n    types.columns = columns;\n    return types;\n  };\n\n  // Add Type\n  const addType = async type => {\n    try {\n      const res = await fetch(\"http://localhost:3001/api/v1/types/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(type)\n      });\n\n      const data = await res.json();\n      if (data[\"Bad Request\"]) throw new Error(data[\"Bad Request\"]);\n      if (data[\"errorMessage\"]) throw new Error(data[\"errorMessage\"]);\n      let newRows = [];\n      if (types.columns.length > 0) {\n        data.type[0].createdAt = moment(data.type.createdAt).format(\n          \"YYYY.MM.DD HH:mm\"\n        );\n        data.type[0].updatedAt = moment(data.type.updatedAt).format(\n          \"YYYY.MM.DD HH:mm\"\n        );\n        newRows = [...types.rows, data.type[0]];\n        let newTypes = Object.assign(\n          {},\n          { columns: types.columns, rows: newRows }\n        );\n        setTypes(newTypes);\n      } else {\n        const typesFromServer = await fetchTypes();\n        setTypes(typesFromServer);\n      }\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  };\n\n  // Add Type\n  const updateType = async type => {\n    try {\n      console.log(JSON.stringify(type));\n      const res = await fetch(`http://localhost:3001/api/v1/types/${type.id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(type)\n      });\n\n      const data = await res.json();\n      if (data[\"Bad Request\"]) throw new Error(data[\"Bad Request\"]);\n      if (data[\"errorMessage\"]) throw new Error(data[\"errorMessage\"]);\n      data.type.createdAt = moment(data.type.createdAt).format(\n        \"YYYY.MM.DD HH:mm\"\n      );\n      data.type.updatedAt = moment(data.type.updatedAt).format(\n        \"YYYY.MM.DD HH:mm\"\n      );\n      let newRows = [];\n      if (types.columns.length > 0) {\n        newRows = types.rows.map(loc => (loc.id === type.id ? data.type : loc));\n        let newTypes = Object.assign(\n          {},\n          { columns: types.columns, rows: newRows }\n        );\n        setTypes(newTypes);\n      } else {\n        const typesFromServer = await fetchTypes();\n        setTypes(typesFromServer);\n      }\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  };\n\n  // Delete Type\n  const deleteType = async parameters => {\n    try {\n      await fetch(`http://localhost:3001/api/v1/types/${parameters.id}`, {\n        method: \"DELETE\"\n      });\n\n      let newRows = types.rows.filter(row => row.id !== parameters.id);\n      let newTypes = Object.assign(\n        {},\n        { columns: types.columns, rows: newRows }\n      );\n      setTypes(newTypes);\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  };\n\n  return (\n    <TypeTable\n      types={types}\n      deleteType={deleteType}\n      addType={addType}\n      updateType={updateType}\n    ></TypeTable>\n  );\n};\n\nexport default Type;\n"]},"metadata":{},"sourceType":"module"}