{"ast":null,"code":"var _jsxFileName = \"/home/lilit/workspace/vtk/from_scratch_frontend_vtk/src/containers/Locations.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport LocationTable from \"../components/LocationTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Location = () => {\n  _s();\n\n  const [showAddLocation, setShowAddLocation] = useState(false);\n  const [locations, setLocations] = useState([]);\n  useEffect(() => {\n    const getLocations = async () => {\n      const locationsFromServer = await fetchLocations();\n      setLocations(locationsFromServer);\n    };\n\n    getLocations();\n  }, []); // Fetch Locations\n\n  const fetchLocations = async () => {\n    const res = await fetch(\"http://localhost:3001/api/v1/locations\");\n    const data = await res.json();\n    console.log({\n      data\n    });\n    let columns = [];\n    let rows = [];\n    data.locations.rows.map(loc => {\n      console.log({\n        loc\n      });\n    });\n    return data;\n  }; // Fetch Location\n\n\n  const fetchLocation = async id => {\n    const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`);\n    const data = await res.json();\n    return data;\n  }; // Add Location\n\n\n  const addLocation = async location => {\n    const res = await fetch(\"http://localhost:3001/api/v1/locations/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(location)\n    });\n    const data = await res.json();\n    setLocations([...locations, data]); // const id = Math.floor(Math.random() * 10000) + 1\n    // const newLocation = { id, ...location }\n    // setLocations([...locations, newLocation])\n  }; // Delete Location\n\n\n  const deleteLocation = async id => {\n    const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`, {\n      method: \"DELETE\"\n    }); //We should control the response status to decide if we will change the state or not.\n\n    res.status === 200 ? setLocations(locations.filter(location => location.id !== id)) : alert(\"Error Deleting This Location\");\n  }; // Toggle Reminder\n\n\n  const toggleReminder = async id => {\n    const locationToToggle = await fetchLocation(id);\n    const updLocation = { ...locationToToggle,\n      reminder: !locationToToggle.reminder\n    };\n    const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(updLocation)\n    });\n    const data = await res.json();\n    setLocations(locations.map(location => location.id === id ? { ...location,\n      reminder: data.reminder\n    } : location));\n  };\n\n  return /*#__PURE__*/_jsxDEV(LocationTable, {\n    locations: locations\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Location, \"tRJlIrGaogbeUdcwZ576iXGGUZQ=\");\n\n_c = Location;\nexport default Location;\n\nvar _c;\n\n$RefreshReg$(_c, \"Location\");","map":{"version":3,"sources":["/home/lilit/workspace/vtk/from_scratch_frontend_vtk/src/containers/Locations.js"],"names":["useState","useEffect","LocationTable","Location","showAddLocation","setShowAddLocation","locations","setLocations","getLocations","locationsFromServer","fetchLocations","res","fetch","data","json","console","log","columns","rows","map","loc","fetchLocation","id","addLocation","location","method","headers","body","JSON","stringify","deleteLocation","status","filter","alert","toggleReminder","locationToToggle","updLocation","reminder"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport LocationTable from \"../components/LocationTable\";\n\nconst Location = () => {\n  const [showAddLocation, setShowAddLocation] = useState(false);\n  const [locations, setLocations] = useState([]);\n\n  useEffect(() => {\n    const getLocations = async () => {\n      const locationsFromServer = await fetchLocations();\n      setLocations(locationsFromServer);\n    };\n\n    getLocations();\n  }, []);\n\n  // Fetch Locations\n  const fetchLocations = async () => {\n    const res = await fetch(\"http://localhost:3001/api/v1/locations\");\n    const data = await res.json();\n\n    console.log({ data });\n    let columns = [];\n    let rows = [];\n    data.locations.rows.map(loc => {\n      console.log({ loc });\n    });\n    return data;\n  };\n\n  // Fetch Location\n  const fetchLocation = async id => {\n    const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`);\n    const data = await res.json();\n\n    return data;\n  };\n\n  // Add Location\n  const addLocation = async location => {\n    const res = await fetch(\"http://localhost:3001/api/v1/locations/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(location)\n    });\n\n    const data = await res.json();\n\n    setLocations([...locations, data]);\n\n    // const id = Math.floor(Math.random() * 10000) + 1\n    // const newLocation = { id, ...location }\n    // setLocations([...locations, newLocation])\n  };\n\n  // Delete Location\n  const deleteLocation = async id => {\n    const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`, {\n      method: \"DELETE\"\n    });\n    //We should control the response status to decide if we will change the state or not.\n    res.status === 200\n      ? setLocations(locations.filter(location => location.id !== id))\n      : alert(\"Error Deleting This Location\");\n  };\n\n  // Toggle Reminder\n  const toggleReminder = async id => {\n    const locationToToggle = await fetchLocation(id);\n    const updLocation = {\n      ...locationToToggle,\n      reminder: !locationToToggle.reminder\n    };\n\n    const res = await fetch(`http://localhost:3001/api/v1/locations/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(updLocation)\n    });\n\n    const data = await res.json();\n\n    setLocations(\n      locations.map(location =>\n        location.id === id ? { ...location, reminder: data.reminder } : location\n      )\n    );\n  };\n\n  return <LocationTable locations={locations} />;\n};\n\nexport default Location;\n"]},"metadata":{},"sourceType":"module"}