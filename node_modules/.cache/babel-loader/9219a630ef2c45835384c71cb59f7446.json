{"ast":null,"code":"var _jsxFileName = \"/home/lilit/workspace/vtk/from_scratch_frontend_vtk/src/containers/Employees.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useSnackbar } from \"notistack\";\nimport EmployeeTable from \"../components/Employee/EmployeeTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar moment = require(\"moment\");\n\nconst Employee = () => {\n  _s();\n\n  const [employees, setEmployees] = useState({});\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  useEffect(() => {\n    const getEmployees = async () => {\n      const employeesFromServer = await fetchEmployees();\n      setEmployees(employeesFromServer);\n    };\n\n    getEmployees();\n  }, []); // Fetch Employees\n\n  const fetchEmployees = async () => {\n    const res = await fetch(\"http://localhost:3001/api/v1/employees\");\n    const data = await res.json();\n    let columns = [];\n    let rows = data.employees.rows;\n    let locColumns = [];\n    if (data.employees.count > 0) locColumns = Object.keys(data.employees.rows[0]);\n    locColumns.forEach(item => {\n      let obj = {};\n\n      switch (item) {\n        case \"id\":\n          obj.headerName = \"ID\";\n          obj.field = item;\n          obj.hide = true;\n          break;\n\n        case \"name\":\n          obj.headerName = \"Имя\";\n          obj.field = item;\n          obj.flex = 0.35;\n          break;\n\n        case \"secondName\":\n          obj.headerName = \"Фамилия\";\n          obj.field = item;\n          obj.flex = 0.35;\n          break;\n\n        case \"fatherName\":\n          obj.headerName = \"Отчество\";\n          obj.field = item;\n          obj.flex = 0.35;\n          break;\n\n        case \"createdAt\":\n          obj.headerName = \"Дата создания\";\n          obj.field = item;\n          obj.flex = 0.2;\n          break;\n\n        case \"updatedAt\":\n          obj.headerName = \"Дата редактирования\";\n          obj.field = item;\n          obj.flex = 0.2;\n          break;\n\n        case \"note\":\n          obj.headerName = \"Примечание\";\n          obj.field = item;\n          obj.flex = 0.4;\n          break;\n\n        default:\n          break;\n      }\n\n      if (data.employees.count > 0 && item !== \"deletedAt\") {\n        columns.push(obj);\n      }\n    });\n    let employees = {};\n    employees.rows = rows.map(row => {\n      row.createdAt = moment(row.createdAt).format(\"YYYY.MM.DD HH:mm\");\n      row.updatedAt = moment(row.updatedAt).format(\"YYYY.MM.DD HH:mm\");\n      return row;\n    });\n    employees.columns = columns;\n    return employees;\n  }; // Add Employee\n\n\n  const addEmployee = async employee => {\n    try {\n      const res = await fetch(\"http://localhost:3001/api/v1/employees/\", {\n        method: \"POST\",\n        body: JSON.stringify(employee),\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      });\n      const data = await res.json();\n      if (data[\"Bad Request\"]) throw new Error(data[\"Bad Request\"]);\n      if (data[\"errorMessage\"]) throw new Error(data[\"errorMessage\"]);\n      let newRows = [];\n\n      if (employees.columns.length > 0) {\n        data.employee[0].createdAt = moment(data.employee.createdAt).format(\"YYYY.MM.DD HH:mm\");\n        data.employee[0].updatedAt = moment(data.employee.updatedAt).format(\"YYYY.MM.DD HH:mm\");\n        newRows = [...employees.rows, data.employee[0]];\n        let newEmployees = Object.assign({}, {\n          columns: employees.columns,\n          rows: newRows\n        });\n        setEmployees(newEmployees);\n      } else {\n        const employeesFromServer = await fetchEmployees();\n        setEmployees(employeesFromServer);\n      }\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  }; // Add Employee\n\n\n  const updateEmployee = async employee => {\n    console.log(\"employee = \", employee);\n\n    try {\n      const res = await fetch(`http://localhost:3001/api/v1/employees/${employee.id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(employee)\n      });\n      const data = await res.json();\n      if (data[\"Bad Request\"]) throw new Error(data[\"Bad Request\"]);\n      if (data[\"errorMessage\"]) throw new Error(data[\"errorMessage\"]);\n      data.employee.createdAt = moment(data.employee.createdAt).format(\"YYYY.MM.DD HH:mm\");\n      data.employee.updatedAt = moment(data.employee.updatedAt).format(\"YYYY.MM.DD HH:mm\");\n      let newRows = [];\n\n      if (employees.columns.length > 0) {\n        newRows = employees.rows.map(loc => loc.id === employee.id ? data.employee : loc);\n        let newEmployees = Object.assign({}, {\n          columns: employees.columns,\n          rows: newRows\n        });\n        setEmployees(newEmployees);\n      } else {\n        const employeesFromServer = await fetchEmployees();\n        setEmployees(employeesFromServer);\n      }\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  }; // Delete Employee\n\n\n  const deleteEmployee = async parameters => {\n    try {\n      await fetch(`http://localhost:3001/api/v1/employees/${parameters.id}`, {\n        method: \"DELETE\"\n      });\n      let newRows = employees.rows.filter(row => row.id !== parameters.id);\n      let newEmployees = Object.assign({}, {\n        columns: employees.columns,\n        rows: newRows\n      });\n      setEmployees(newEmployees);\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(EmployeeTable, {\n    employees: employees,\n    deleteEmployee: deleteEmployee,\n    addEmployee: addEmployee,\n    updateEmployee: updateEmployee\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Employee, \"+5rHUN/2GlzJ2vlw3mOPaqET4mY=\", false, function () {\n  return [useSnackbar];\n});\n\n_c = Employee;\nexport default Employee;\n\nvar _c;\n\n$RefreshReg$(_c, \"Employee\");","map":{"version":3,"sources":["/home/lilit/workspace/vtk/from_scratch_frontend_vtk/src/containers/Employees.js"],"names":["useState","useEffect","useSnackbar","EmployeeTable","moment","require","Employee","employees","setEmployees","enqueueSnackbar","getEmployees","employeesFromServer","fetchEmployees","res","fetch","data","json","columns","rows","locColumns","count","Object","keys","forEach","item","obj","headerName","field","hide","flex","push","map","row","createdAt","format","updatedAt","addEmployee","employee","method","body","JSON","stringify","headers","Error","newRows","length","newEmployees","assign","err","console","log","message","variant","anchorOrigin","vertical","horizontal","updateEmployee","id","loc","deleteEmployee","parameters","filter"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useSnackbar } from \"notistack\";\nimport EmployeeTable from \"../components/Employee/EmployeeTable\";\nvar moment = require(\"moment\");\n\nconst Employee = () => {\n  const [employees, setEmployees] = useState({});\n  const { enqueueSnackbar } = useSnackbar();\n\n  useEffect(() => {\n    const getEmployees = async () => {\n      const employeesFromServer = await fetchEmployees();\n      setEmployees(employeesFromServer);\n    };\n    getEmployees();\n  }, []);\n\n  // Fetch Employees\n  const fetchEmployees = async () => {\n    const res = await fetch(\"http://localhost:3001/api/v1/employees\");\n    const data = await res.json();\n    let columns = [];\n    let rows = data.employees.rows;\n    let locColumns = [];\n    if (data.employees.count > 0)\n      locColumns = Object.keys(data.employees.rows[0]);\n\n    locColumns.forEach(item => {\n      let obj = {};\n      switch (item) {\n        case \"id\":\n          obj.headerName = \"ID\";\n          obj.field = item;\n          obj.hide = true;\n          break;\n        case \"name\":\n          obj.headerName = \"Имя\";\n          obj.field = item;\n          obj.flex = 0.35;\n          break;\n        case \"secondName\":\n          obj.headerName = \"Фамилия\";\n          obj.field = item;\n          obj.flex = 0.35;\n          break;\n        case \"fatherName\":\n          obj.headerName = \"Отчество\";\n          obj.field = item;\n          obj.flex = 0.35;\n          break;\n        case \"createdAt\":\n          obj.headerName = \"Дата создания\";\n          obj.field = item;\n          obj.flex = 0.2;\n          break;\n        case \"updatedAt\":\n          obj.headerName = \"Дата редактирования\";\n          obj.field = item;\n          obj.flex = 0.2;\n          break;\n        case \"note\":\n          obj.headerName = \"Примечание\";\n          obj.field = item;\n          obj.flex = 0.4;\n          break;\n        default:\n          break;\n      }\n      if (data.employees.count > 0 && item !== \"deletedAt\") {\n        columns.push(obj);\n      }\n    });\n\n    let employees = {};\n    employees.rows = rows.map(row => {\n      row.createdAt = moment(row.createdAt).format(\"YYYY.MM.DD HH:mm\");\n      row.updatedAt = moment(row.updatedAt).format(\"YYYY.MM.DD HH:mm\");\n      return row;\n    });\n    employees.columns = columns;\n    return employees;\n  };\n\n  // Add Employee\n  const addEmployee = async employee => {\n    try {\n      const res = await fetch(\"http://localhost:3001/api/v1/employees/\", {\n        method: \"POST\",\n        body: JSON.stringify(employee),\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      });\n\n      const data = await res.json();\n      if (data[\"Bad Request\"]) throw new Error(data[\"Bad Request\"]);\n      if (data[\"errorMessage\"]) throw new Error(data[\"errorMessage\"]);\n      let newRows = [];\n      if (employees.columns.length > 0) {\n        data.employee[0].createdAt = moment(data.employee.createdAt).format(\n          \"YYYY.MM.DD HH:mm\"\n        );\n        data.employee[0].updatedAt = moment(data.employee.updatedAt).format(\n          \"YYYY.MM.DD HH:mm\"\n        );\n        newRows = [...employees.rows, data.employee[0]];\n        let newEmployees = Object.assign(\n          {},\n          { columns: employees.columns, rows: newRows }\n        );\n        setEmployees(newEmployees);\n      } else {\n        const employeesFromServer = await fetchEmployees();\n        setEmployees(employeesFromServer);\n      }\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  };\n\n  // Add Employee\n  const updateEmployee = async employee => {\n    console.log(\"employee = \", employee);\n    try {\n      const res = await fetch(\n        `http://localhost:3001/api/v1/employees/${employee.id}`,\n        {\n          method: \"PUT\",\n          headers: {\n            \"Content-type\": \"application/json\"\n          },\n          body: JSON.stringify(employee)\n        }\n      );\n\n      const data = await res.json();\n      if (data[\"Bad Request\"]) throw new Error(data[\"Bad Request\"]);\n      if (data[\"errorMessage\"]) throw new Error(data[\"errorMessage\"]);\n      data.employee.createdAt = moment(data.employee.createdAt).format(\n        \"YYYY.MM.DD HH:mm\"\n      );\n      data.employee.updatedAt = moment(data.employee.updatedAt).format(\n        \"YYYY.MM.DD HH:mm\"\n      );\n      let newRows = [];\n      if (employees.columns.length > 0) {\n        newRows = employees.rows.map(loc =>\n          loc.id === employee.id ? data.employee : loc\n        );\n        let newEmployees = Object.assign(\n          {},\n          { columns: employees.columns, rows: newRows }\n        );\n        setEmployees(newEmployees);\n      } else {\n        const employeesFromServer = await fetchEmployees();\n        setEmployees(employeesFromServer);\n      }\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  };\n\n  // Delete Employee\n  const deleteEmployee = async parameters => {\n    try {\n      await fetch(`http://localhost:3001/api/v1/employees/${parameters.id}`, {\n        method: \"DELETE\"\n      });\n\n      let newRows = employees.rows.filter(row => row.id !== parameters.id);\n      let newEmployees = Object.assign(\n        {},\n        { columns: employees.columns, rows: newRows }\n      );\n      setEmployees(newEmployees);\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar(`${err.message}`, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"center\"\n        }\n      });\n    }\n  };\n\n  return (\n    <EmployeeTable\n      employees={employees}\n      deleteEmployee={deleteEmployee}\n      addEmployee={addEmployee}\n      updateEmployee={updateEmployee}\n    ></EmployeeTable>\n  );\n};\n\nexport default Employee;\n"]},"metadata":{},"sourceType":"module"}